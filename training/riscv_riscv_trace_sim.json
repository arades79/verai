{"question": "/* Generated by Yosys 0.53 (git sha1 53c22ab7c, g++ 12.2.1 -fPIC -O3) */\\n", "answer": "//-----------------------------------------------------------------\n//                         RISC-V Core\n//                            V1.0.1\n//                     Ultra-Embedded.com\n//                     Copyright 2014-2019\n//\n//                   admin@ultra-embedded.com\n//\n//                       License: BSD\n//-----------------------------------------------------------------\n//\n// Copyright (c) 2014-2019, Ultra-Embedded.com\n// All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions \n// are met:\n//   - Redistributions of source code must retain the above copyright\n//     notice, this list of conditions and the following disclaimer.\n//   - Redistributions in binary form must reproduce the above copyright\n//     notice, this list of conditions and the following disclaimer \n//     in the documentation and/or other materials provided with the \n//     distribution.\n//   - Neither the name of the author nor the names of its contributors \n//     may be used to endorse or promote products derived from this \n//     software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR \n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE \n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR \n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF \n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR \n// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF \n// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF \n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF \n// SUCH DAMAGE.\n//-----------------------------------------------------------------\n`include \"riscv_defs.v\"\n\nmodule riscv_trace_sim\n(\n     input                        valid_i\n    ,input  [31:0]                pc_i\n    ,input  [31:0]                opcode_i\n);\n\n//-----------------------------------------------------------------\n// get_regname_str: Convert register number to string\n//-----------------------------------------------------------------\n`ifdef verilator\nfunction [79:0] get_regname_str;\n    input  [4:0] regnum;\nbegin\n    case (regnum)\n        5'd0:  get_regname_str = \"zero\";\n        5'd1:  get_regname_str = \"ra\";\n        5'd2:  get_regname_str = \"sp\";\n        5'd3:  get_regname_str = \"gp\";\n        5'd4:  get_regname_str = \"tp\";\n        5'd5:  get_regname_str = \"t0\";\n        5'd6:  get_regname_str = \"t1\";\n        5'd7:  get_regname_str = \"t2\";\n        5'd8:  get_regname_str = \"s0\";\n        5'd9:  get_regname_str = \"s1\";\n        5'd10: get_regname_str = \"a0\";\n        5'd11: get_regname_str = \"a1\";\n        5'd12: get_regname_str = \"a2\";\n        5'd13: get_regname_str = \"a3\";\n        5'd14: get_regname_str = \"a4\";\n        5'd15: get_regname_str = \"a5\";\n        5'd16: get_regname_str = \"a6\";\n        5'd17: get_regname_str = \"a7\";\n        5'd18: get_regname_str = \"s2\";\n        5'd19: get_regname_str = \"s3\";\n        5'd20: get_regname_str = \"s4\";\n        5'd21: get_regname_str = \"s5\";\n        5'd22: get_regname_str = \"s6\";\n        5'd23: get_regname_str = \"s7\";\n        5'd24: get_regname_str = \"s8\";\n        5'd25: get_regname_str = \"s9\";\n        5'd26: get_regname_str = \"s10\";\n        5'd27: get_regname_str = \"s11\";\n        5'd28: get_regname_str = \"t3\";\n        5'd29: get_regname_str = \"t4\";\n        5'd30: get_regname_str = \"t5\";\n        5'd31: get_regname_str = \"t6\";\n    endcase\nend\nendfunction\n\n//-------------------------------------------------------------------\n// Debug strings\n//-------------------------------------------------------------------\nreg [79:0] dbg_inst_str;\nreg [79:0] dbg_inst_ra;\nreg [79:0] dbg_inst_rb;\nreg [79:0] dbg_inst_rd;\nreg [31:0] dbg_inst_imm;\nreg [31:0] dbg_inst_pc;\n\nwire [4:0] ra_idx_w = opcode_i[19:15];\nwire [4:0] rb_idx_w = opcode_i[24:20];\nwire [4:0] rd_idx_w = opcode_i[11:7];\n\n`define DBG_IMM_IMM20     {opcode_i[31:12], 12'b0}\n`define DBG_IMM_IMM12     {{20{opcode_i[31]}}, opcode_i[31:20]}\n`define DBG_IMM_BIMM      {{19{opcode_i[31]}}, opcode_i[31], opcode_i[7], opcode_i[30:25], opcode_i[11:8], 1'b0}\n`define DBG_IMM_JIMM20    {{12{opcode_i[31]}}, opcode_i[19:12], opcode_i[20], opcode_i[30:25], opcode_i[24:21], 1'b0}\n`define DBG_IMM_STOREIMM  {{20{opcode_i[31]}}, opcode_i[31:25], opcode_i[11:7]}\n`define DBG_IMM_SHAMT     opcode_i[24:20]\n\nalways @ *\nbegin\n    dbg_inst_str = \"-\";\n    dbg_inst_ra  = \"-\";\n    dbg_inst_rb  = \"-\";\n    dbg_inst_rd  = \"-\";\n    dbg_inst_pc  = 32'bx;\n\n    if (valid_i)\n    begin\n        dbg_inst_pc  = pc_i;\n        dbg_inst_ra  = get_regname_str(ra_idx_w);\n        dbg_inst_rb  = get_regname_str(rb_idx_w);\n        dbg_inst_rd  = get_regname_str(rd_idx_w);\n\n        case (1'b1)\n            ((opcode_i & `INST_ANDI_MASK) == `INST_ANDI)   : dbg_inst_str = \"andi\";\n            ((opcode_i & `INST_ADDI_MASK) == `INST_ADDI)   : dbg_inst_str = \"addi\";\n            ((opcode_i & `INST_SLTI_MASK) == `INST_SLTI)   : dbg_inst_str = \"slti\";\n            ((opcode_i & `INST_SLTIU_MASK) == `INST_SLTIU)  : dbg_inst_str = \"sltiu\";\n            ((opcode_i & `INST_ORI_MASK) == `INST_ORI)    : dbg_inst_str = \"ori\";\n            ((opcode_i & `INST_XORI_MASK) == `INST_XORI)   : dbg_inst_str = \"xori\";\n            ((opcode_i & `INST_SLLI_MASK) == `INST_SLLI)   : dbg_inst_str = \"slli\";\n            ((opcode_i & `INST_SRLI_MASK) == `INST_SRLI)   : dbg_inst_str = \"srli\";\n            ((opcode_i & `INST_SRAI_MASK) == `INST_SRAI)   : dbg_inst_str = \"srai\";\n            ((opcode_i & `INST_LUI_MASK) == `INST_LUI)    : dbg_inst_str = \"lui\";\n            ((opcode_i & `INST_AUIPC_MASK) == `INST_AUIPC)  : dbg_inst_str = \"auipc\";\n            ((opcode_i & `INST_ADD_MASK) == `INST_ADD)    : dbg_inst_str = \"add\";\n            ((opcode_i & `INST_SUB_MASK) == `INST_SUB)    : dbg_inst_str = \"sub\";\n            ((opcode_i & `INST_SLT_MASK) == `INST_SLT)    : dbg_inst_str = \"slt\";\n            ((opcode_i & `INST_SLTU_MASK) == `INST_SLTU)   : dbg_inst_str = \"sltu\";\n            ((opcode_i & `INST_XOR_MASK) == `INST_XOR)    : dbg_inst_str = \"xor\";\n            ((opcode_i & `INST_OR_MASK) == `INST_OR)     : dbg_inst_str = \"or\";\n            ((opcode_i & `INST_AND_MASK) == `INST_AND)    : dbg_inst_str = \"and\";\n            ((opcode_i & `INST_SLL_MASK) == `INST_SLL)    : dbg_inst_str = \"sll\";\n            ((opcode_i & `INST_SRL_MASK) == `INST_SRL)    : dbg_inst_str = \"srl\";\n            ((opcode_i & `INST_SRA_MASK) == `INST_SRA)    : dbg_inst_str = \"sra\";\n            ((opcode_i & `INST_JAL_MASK) == `INST_JAL)    : dbg_inst_str = \"jal\";\n            ((opcode_i & `INST_JALR_MASK) == `INST_JALR)   : dbg_inst_str = \"jalr\";\n            ((opcode_i & `INST_BEQ_MASK) == `INST_BEQ)    : dbg_inst_str = \"beq\";\n            ((opcode_i & `INST_BNE_MASK) == `INST_BNE)    : dbg_inst_str = \"bne\";\n            ((opcode_i & `INST_BLT_MASK) == `INST_BLT)    : dbg_inst_str = \"blt\";\n            ((opcode_i & `INST_BGE_MASK) == `INST_BGE)    : dbg_inst_str = \"bge\";\n            ((opcode_i & `INST_BLTU_MASK) == `INST_BLTU)   : dbg_inst_str = \"bltu\";\n            ((opcode_i & `INST_BGEU_MASK) == `INST_BGEU)   : dbg_inst_str = \"bgeu\";\n            ((opcode_i & `INST_LB_MASK) == `INST_LB)     : dbg_inst_str = \"lb\";\n            ((opcode_i & `INST_LH_MASK) == `INST_LH)     : dbg_inst_str = \"lh\";\n            ((opcode_i & `INST_LW_MASK) == `INST_LW)     : dbg_inst_str = \"lw\";\n            ((opcode_i & `INST_LBU_MASK) == `INST_LBU)    : dbg_inst_str = \"lbu\";\n            ((opcode_i & `INST_LHU_MASK) == `INST_LHU)    : dbg_inst_str = \"lhu\";\n            ((opcode_i & `INST_LWU_MASK) == `INST_LWU)    : dbg_inst_str = \"lwu\";\n            ((opcode_i & `INST_SB_MASK) == `INST_SB)     : dbg_inst_str = \"sb\";\n            ((opcode_i & `INST_SH_MASK) == `INST_SH)     : dbg_inst_str = \"sh\";\n            ((opcode_i & `INST_SW_MASK) == `INST_SW)     : dbg_inst_str = \"sw\";\n            ((opcode_i & `INST_ECALL_MASK) == `INST_ECALL)  : dbg_inst_str = \"ecall\";\n            ((opcode_i & `INST_EBREAK_MASK) == `INST_EBREAK) : dbg_inst_str = \"ebreak\";\n            ((opcode_i & `INST_ERET_MASK) == `INST_ERET)   : dbg_inst_str = \"eret\";\n            ((opcode_i & `INST_CSRRW_MASK) == `INST_CSRRW)  : dbg_inst_str = \"csrrw\";\n            ((opcode_i & `INST_CSRRS_MASK) == `INST_CSRRS)  : dbg_inst_str = \"csrrs\";\n            ((opcode_i & `INST_CSRRC_MASK) == `INST_CSRRC)  : dbg_inst_str = \"csrrc\";\n            ((opcode_i & `INST_CSRRWI_MASK) == `INST_CSRRWI) : dbg_inst_str = \"csrrwi\";\n            ((opcode_i & `INST_CSRRSI_MASK) == `INST_CSRRSI) : dbg_inst_str = \"csrrsi\";\n            ((opcode_i & `INST_CSRRCI_MASK) == `INST_CSRRCI) : dbg_inst_str = \"csrrci\";\n            ((opcode_i & `INST_MUL_MASK) == `INST_MUL)    : dbg_inst_str = \"mul\";\n            ((opcode_i & `INST_MULH_MASK) == `INST_MULH)   : dbg_inst_str = \"mulh\";\n            ((opcode_i & `INST_MULHSU_MASK) == `INST_MULHSU) : dbg_inst_str = \"mulhsu\";\n            ((opcode_i & `INST_MULHU_MASK) == `INST_MULHU)  : dbg_inst_str = \"mulhu\";\n            ((opcode_i & `INST_DIV_MASK) == `INST_DIV)    : dbg_inst_str = \"div\";\n            ((opcode_i & `INST_DIVU_MASK) == `INST_DIVU)   : dbg_inst_str = \"divu\";\n            ((opcode_i & `INST_REM_MASK) == `INST_REM)    : dbg_inst_str = \"rem\";\n            ((opcode_i & `INST_REMU_MASK) == `INST_REMU)   : dbg_inst_str = \"remu\";\n            ((opcode_i & `INST_IFENCE_MASK) == `INST_IFENCE)  : dbg_inst_str = \"fence.i\";\n        endcase\n\n        case (1'b1)\n\n            ((opcode_i & `INST_ADDI_MASK) == `INST_ADDI) ,  // addi\n            ((opcode_i & `INST_ANDI_MASK) == `INST_ANDI) ,  // andi\n            ((opcode_i & `INST_SLTI_MASK) == `INST_SLTI) ,  // slti\n            ((opcode_i & `INST_SLTIU_MASK) == `INST_SLTIU) , // sltiu\n            ((opcode_i & `INST_ORI_MASK) == `INST_ORI) ,   // ori\n            ((opcode_i & `INST_XORI_MASK) == `INST_XORI) ,  // xori\n            ((opcode_i & `INST_CSRRW_MASK) == `INST_CSRRW) , // csrrw\n            ((opcode_i & `INST_CSRRS_MASK) == `INST_CSRRS) , // csrrs\n            ((opcode_i & `INST_CSRRC_MASK) == `INST_CSRRC) , // csrrc\n            ((opcode_i & `INST_CSRRWI_MASK) == `INST_CSRRWI) ,// csrrwi\n            ((opcode_i & `INST_CSRRSI_MASK) == `INST_CSRRSI) ,// csrrsi\n            ((opcode_i & `INST_CSRRCI_MASK) == `INST_CSRRCI) :// csrrci\n            begin\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = `DBG_IMM_IMM12;\n            end\n\n            ((opcode_i & `INST_SLLI_MASK) == `INST_SLLI) , // slli\n            ((opcode_i & `INST_SRLI_MASK) == `INST_SRLI) , // srli\n            ((opcode_i & `INST_SRAI_MASK) == `INST_SRAI) : // srai\n            begin\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = {27'b0, `DBG_IMM_SHAMT};\n            end\n\n            ((opcode_i & `INST_LUI_MASK) == `INST_LUI) : // lui\n            begin\n                dbg_inst_ra  = \"-\";\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = `DBG_IMM_IMM20;\n            end\n\n            ((opcode_i & `INST_AUIPC_MASK) == `INST_AUIPC) : // auipc\n            begin\n                dbg_inst_ra  = \"pc\";\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = `DBG_IMM_IMM20;\n            end   \n\n            ((opcode_i & `INST_JAL_MASK) == `INST_JAL) :  // jal\n            begin\n                dbg_inst_ra  = \"-\";\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = pc_i + `DBG_IMM_JIMM20;\n\n                if (rd_idx_w == 5'd1)\n                    dbg_inst_str = \"call\";\n            end\n\n            ((opcode_i & `INST_JALR_MASK) == `INST_JALR) : // jalr\n            begin\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = `DBG_IMM_IMM12;\n\n               if (ra_idx_w == 5'd1 && `DBG_IMM_IMM12 == 32'b0)\n                    dbg_inst_str = \"ret\";\n               else if (rd_idx_w == 5'd1)\n                    dbg_inst_str = \"call (R)\";\n            end\n\n            // lb lh lw lbu lhu lwu\n            ((opcode_i & `INST_LB_MASK) == `INST_LB) ,\n            ((opcode_i & `INST_LH_MASK) == `INST_LH) ,\n            ((opcode_i & `INST_LW_MASK) == `INST_LW) ,\n            ((opcode_i & `INST_LBU_MASK) == `INST_LBU) ,\n            ((opcode_i & `INST_LHU_MASK) == `INST_LHU) ,\n            ((opcode_i & `INST_LWU_MASK) == `INST_LWU) :\n            begin\n                dbg_inst_rb  = \"-\";\n                dbg_inst_imm = `DBG_IMM_IMM12;\n            end \n\n            // sb sh sw\n            ((opcode_i & `INST_SB_MASK) == `INST_SB) ,\n            ((opcode_i & `INST_SH_MASK) == `INST_SH) ,\n            ((opcode_i & `INST_SW_MASK) == `INST_SW) :\n            begin\n                dbg_inst_rd  = \"-\";\n                dbg_inst_imm = `DBG_IMM_STOREIMM;\n            end\n        endcase        \n    end\nend\n`endif\n\nendmodule\n"}