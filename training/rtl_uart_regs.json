{"question": "/* Generated by Yosys 0.53 (git sha1 53c22ab7c, clang++ 15.0.0 -fPIC -O3) */\n\n(* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:36.1-258.10\" *)\nmodule uart_regs(clk_i, rst_i, uart_cfg_int_rx_error_o, uart_cfg_int_rx_ready_o, uart_cfg_int_tx_ready_o, uart_cfg_stop_bits_o, uart_cfg_div_o, uart_usr_tx_busy_i, uart_usr_rx_error_i, uart_usr_rx_ready_i, uart_udr_data_o, uart_udr_data_i, uart_udr_wr_req_o, uart_udr_rd_req_o, addr_i, data_i, data_o, we_i, stb_i, ack_o);\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:244.1-250.19\" *)\n  wire _000_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:179.1-185.27\" *)\n  wire _001_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:104.10-104.40\" *)\n  wire _002_;\n  wire _003_;\n  wire _004_;\n  wire _005_;\n  wire _006_;\n  wire _007_;\n  wire _008_;\n  wire _009_;\n  wire _010_;\n  wire _011_;\n  wire _012_;\n  wire _013_;\n  wire _014_;\n  wire _015_;\n  wire _016_;\n  wire _017_;\n  wire _018_;\n  wire _019_;\n  wire _020_;\n  wire _021_;\n  wire _022_;\n  wire _023_;\n  wire _024_;\n  wire _025_;\n  wire _026_;\n  wire _027_;\n  wire _028_;\n  wire _029_;\n  wire _030_;\n  wire _031_;\n  wire _032_;\n  wire _033_;\n  wire _034_;\n  wire _035_;\n  wire _036_;\n  wire _037_;\n  wire _038_;\n  wire _039_;\n  wire _040_;\n  wire _041_;\n  wire _042_;\n  wire _043_;\n  wire _044_;\n  wire _045_;\n  wire _046_;\n  wire _047_;\n  wire _048_;\n  wire _049_;\n  wire _050_;\n  wire _051_;\n  wire _052_;\n  wire _053_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:61.20-61.25\" *)\n  output ack_o;\n  wire ack_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:242.5-242.10\" *)\n  reg ack_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:56.20-56.26\" *)\n  input [7:0] addr_i;\n  wire [7:0] addr_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:38.20-38.25\" *)\n  input clk_i;\n  wire clk_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:57.20-57.26\" *)\n  input [31:0] data_i;\n  wire [31:0] data_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:58.20-58.26\" *)\n  output [31:0] data_o;\n  wire [31:0] data_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:67.12-67.18\" *)\n  wire [31:0] data_q;\n  wire [19:0] data_r;\n  wire [19:0] rd_data_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:39.20-39.25\" *)\n  input rst_i;\n  wire rst_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:60.20-60.25\" *)\n  input stb_i;\n  wire stb_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:46.20-46.34\" *)\n  output [8:0] uart_cfg_div_o;\n  wire [8:0] uart_cfg_div_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:147.12-147.26\" *)\n  reg [8:0] uart_cfg_div_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:42.20-42.43\" *)\n  output uart_cfg_int_rx_error_o;\n  wire uart_cfg_int_rx_error_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:99.12-99.35\" *)\n  reg uart_cfg_int_rx_error_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:43.20-43.43\" *)\n  output uart_cfg_int_rx_ready_o;\n  wire uart_cfg_int_rx_ready_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:111.12-111.35\" *)\n  reg uart_cfg_int_rx_ready_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:44.20-44.43\" *)\n  output uart_cfg_int_tx_ready_o;\n  wire uart_cfg_int_tx_ready_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:123.12-123.35\" *)\n  reg uart_cfg_int_tx_ready_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:45.20-45.40\" *)\n  output uart_cfg_stop_bits_o;\n  wire uart_cfg_stop_bits_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:135.12-135.32\" *)\n  reg uart_cfg_stop_bits_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:51.20-51.35\" *)\n  input [7:0] uart_udr_data_i;\n  wire [7:0] uart_udr_data_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:50.20-50.35\" *)\n  output [7:0] uart_udr_data_o;\n  wire [7:0] uart_udr_data_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:53.20-53.37\" *)\n  output uart_udr_rd_req_o;\n  wire uart_udr_rd_req_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:177.5-177.18\" *)\n  reg uart_udr_wr_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:52.20-52.37\" *)\n  output uart_udr_wr_req_o;\n  wire uart_udr_wr_req_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:48.20-48.39\" *)\n  input uart_usr_rx_error_i;\n  wire uart_usr_rx_error_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:49.20-49.39\" *)\n  input uart_usr_rx_ready_i;\n  wire uart_usr_rx_ready_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:47.20-47.38\" *)\n  input uart_usr_tx_busy_i;\n  wire uart_usr_tx_busy_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:59.20-59.24\" *)\n  input we_i;\n  wire we_i;\n  assign _014_ = ~ack_q;\n  assign _015_ = ~(stb_i & we_i);\n  assign _016_ = _014_ & ~(_015_);\n  assign _017_ = addr_i[1] | addr_i[0];\n  assign _018_ = addr_i[2] | addr_i[3];\n  assign _019_ = _018_ | _017_;\n  assign _020_ = addr_i[5] | addr_i[4];\n  assign _021_ = addr_i[7] | addr_i[6];\n  assign _022_ = _021_ | _020_;\n  assign _023_ = _022_ | _019_;\n  assign _002_ = _016_ & ~(_023_);\n  assign _024_ = addr_i[2] | ~(addr_i[3]);\n  assign _025_ = _024_ | _017_;\n  assign _026_ = _025_ | _022_;\n  assign _001_ = _016_ & ~(_026_);\n  assign _027_ = we_i | ~(stb_i);\n  assign _028_ = _014_ & ~(_027_);\n  assign _000_ = _028_ | _016_;\n  assign _029_ = uart_udr_data_i[1] & ~(_026_);\n  assign _030_ = addr_i[3] | ~(addr_i[2]);\n  assign _031_ = _030_ | _017_;\n  assign _032_ = _031_ | _022_;\n  assign _033_ = uart_usr_rx_error_i & ~(_032_);\n  assign _034_ = _033_ | _029_;\n  assign _035_ = uart_cfg_div_q[1] & ~(_023_);\n  assign _036_ = _035_ | _034_;\n  assign _037_ = ~(_032_ & _026_);\n  assign _038_ = _037_ | ~(_023_);\n  assign data_r[1] = _038_ & _036_;\n  assign _039_ = _026_ | ~(uart_udr_data_i[0]);\n  assign _040_ = uart_usr_rx_ready_i & ~(_032_);\n  assign _041_ = _039_ & ~(_040_);\n  assign _042_ = uart_cfg_div_q[0] & ~(_023_);\n  assign _043_ = _041_ & ~(_042_);\n  assign data_r[0] = _038_ & ~(_043_);\n  assign _044_ = uart_udr_data_i[3] & ~(_026_);\n  assign _045_ = uart_cfg_div_q[3] & ~(_023_);\n  assign _046_ = _045_ | _044_;\n  assign _047_ = ~(_026_ & _023_);\n  assign data_r[3] = _047_ & _046_;\n  assign _048_ = _026_ | ~(uart_udr_data_i[4]);\n  assign _049_ = uart_cfg_div_q[4] & ~(_023_);\n  assign _050_ = _048_ & ~(_049_);\n  assign data_r[4] = _047_ & ~(_050_);\n  assign _051_ = _026_ | ~(uart_udr_data_i[5]);\n  assign _052_ = uart_cfg_div_q[5] & ~(_023_);\n  assign _053_ = _051_ & ~(_052_);\n  assign data_r[5] = _047_ & ~(_053_);\n  assign _003_ = _026_ | ~(uart_udr_data_i[6]);\n  assign _004_ = uart_cfg_div_q[6] & ~(_023_);\n  assign _005_ = _003_ & ~(_004_);\n  assign data_r[6] = _047_ & ~(_005_);\n  assign _006_ = _026_ | ~(uart_udr_data_i[7]);\n  assign _007_ = uart_cfg_div_q[7] & ~(_023_);\n  assign _008_ = _006_ & ~(_007_);\n  assign data_r[7] = _047_ & ~(_008_);\n  assign _009_ = _026_ | ~(uart_udr_data_i[2]);\n  assign _010_ = uart_usr_tx_busy_i & ~(_032_);\n  assign _011_ = _009_ & ~(_010_);\n  assign _012_ = uart_cfg_div_q[2] & ~(_023_);\n  assign _013_ = _011_ & ~(_012_);\n  assign data_r[2] = _038_ & ~(_013_);\n  assign uart_udr_rd_req_o = _028_ & ~(_026_);\n  assign data_r[19] = uart_cfg_int_rx_error_q & ~(_023_);\n  assign data_r[18] = uart_cfg_int_rx_ready_q & ~(_023_);\n  assign data_r[17] = uart_cfg_int_tx_ready_q & ~(_023_);\n  assign data_r[8] = uart_cfg_div_q[8] & ~(_023_);\n  assign data_r[16] = uart_cfg_stop_bits_q & ~(_023_);\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:101.1-105.46\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_int_rx_error_q <= 1'h0;\n    else if (_002_) uart_cfg_int_rx_error_q <= data_i[19];\n  reg \\data_o_reg[0] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[0]  <= 1'h0;\n    else \\data_o_reg[0]  <= data_r[0];\n  assign data_o[0] = \\data_o_reg[0] ;\n  reg \\data_o_reg[1] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[1]  <= 1'h0;\n    else \\data_o_reg[1]  <= data_r[1];\n  assign data_o[1] = \\data_o_reg[1] ;\n  reg \\data_o_reg[2] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[2]  <= 1'h0;\n    else \\data_o_reg[2]  <= data_r[2];\n  assign data_o[2] = \\data_o_reg[2] ;\n  reg \\data_o_reg[3] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[3]  <= 1'h0;\n    else \\data_o_reg[3]  <= data_r[3];\n  assign data_o[3] = \\data_o_reg[3] ;\n  reg \\data_o_reg[4] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[4]  <= 1'h0;\n    else \\data_o_reg[4]  <= data_r[4];\n  assign data_o[4] = \\data_o_reg[4] ;\n  reg \\data_o_reg[5] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[5]  <= 1'h0;\n    else \\data_o_reg[5]  <= data_r[5];\n  assign data_o[5] = \\data_o_reg[5] ;\n  reg \\data_o_reg[6] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[6]  <= 1'h0;\n    else \\data_o_reg[6]  <= data_r[6];\n  assign data_o[6] = \\data_o_reg[6] ;\n  reg \\data_o_reg[7] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[7]  <= 1'h0;\n    else \\data_o_reg[7]  <= data_r[7];\n  assign data_o[7] = \\data_o_reg[7] ;\n  reg \\data_o_reg[8] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[8]  <= 1'h0;\n    else \\data_o_reg[8]  <= data_r[8];\n  assign data_o[8] = \\data_o_reg[8] ;\n  reg \\data_o_reg[16] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[16]  <= 1'h0;\n    else \\data_o_reg[16]  <= data_r[16];\n  assign data_o[16] = \\data_o_reg[16] ;\n  reg \\data_o_reg[17] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[17]  <= 1'h0;\n    else \\data_o_reg[17]  <= data_r[17];\n  assign data_o[17] = \\data_o_reg[17] ;\n  reg \\data_o_reg[18] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[18]  <= 1'h0;\n    else \\data_o_reg[18]  <= data_r[18];\n  assign data_o[18] = \\data_o_reg[18] ;\n  reg \\data_o_reg[19] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:231.1-235.25\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_o_reg[19]  <= 1'h0;\n    else \\data_o_reg[19]  <= data_r[19];\n  assign data_o[19] = \\data_o_reg[19] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:244.1-250.19\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) ack_q <= 1'h0;\n    else ack_q <= _000_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:179.1-185.27\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_udr_wr_q <= 1'h0;\n    else uart_udr_wr_q <= _001_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[0] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[0] <= data_i[0];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[1] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[1] <= data_i[1];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[2] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[2] <= data_i[2];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[3] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[3] <= data_i[3];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[4] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[4] <= data_i[4];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[5] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[5] <= data_i[5];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[6] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[6] <= data_i[6];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[7] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[7] <= data_i[7];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:149.1-153.35\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_div_q[8] <= 1'h0;\n    else if (_002_) uart_cfg_div_q[8] <= data_i[8];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:137.1-141.43\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_stop_bits_q <= 1'h0;\n    else if (_002_) uart_cfg_stop_bits_q <= data_i[16];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:125.1-129.46\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_int_tx_ready_q <= 1'h0;\n    else if (_002_) uart_cfg_int_tx_ready_q <= data_i[17];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:113.1-117.46\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) uart_cfg_int_rx_ready_q <= 1'h0;\n    else if (_002_) uart_cfg_int_rx_ready_q <= data_i[18];\n  reg \\data_q_reg[0] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[0]  <= 1'h0;\n    else \\data_q_reg[0]  <= data_i[0];\n  assign data_q[0] = \\data_q_reg[0] ;\n  reg \\data_q_reg[1] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[1]  <= 1'h0;\n    else \\data_q_reg[1]  <= data_i[1];\n  assign data_q[1] = \\data_q_reg[1] ;\n  reg \\data_q_reg[2] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[2]  <= 1'h0;\n    else \\data_q_reg[2]  <= data_i[2];\n  assign data_q[2] = \\data_q_reg[2] ;\n  reg \\data_q_reg[3] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[3]  <= 1'h0;\n    else \\data_q_reg[3]  <= data_i[3];\n  assign data_q[3] = \\data_q_reg[3] ;\n  reg \\data_q_reg[4] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[4]  <= 1'h0;\n    else \\data_q_reg[4]  <= data_i[4];\n  assign data_q[4] = \\data_q_reg[4] ;\n  reg \\data_q_reg[5] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[5]  <= 1'h0;\n    else \\data_q_reg[5]  <= data_i[5];\n  assign data_q[5] = \\data_q_reg[5] ;\n  reg \\data_q_reg[6] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[6]  <= 1'h0;\n    else \\data_q_reg[6]  <= data_i[6];\n  assign data_q[6] = \\data_q_reg[6] ;\n  reg \\data_q_reg[7] ;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart_regs.v:69.1-73.22\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) \\data_q_reg[7]  <= 1'h0;\n    else \\data_q_reg[7]  <= data_i[7];\n  assign data_q[7] = \\data_q_reg[7] ;\n  assign ack_o = ack_q;\n  assign { data_o[31:20], data_o[15:9] } = 19'h00000;\n  assign data_q[31:8] = 24'hxxxxxx;\n  assign data_r[15:9] = 7'h00;\n  assign rd_data_q = { data_o[19:16], 7'h00, data_o[8:0] };\n  assign uart_cfg_div_o = uart_cfg_div_q;\n  assign uart_cfg_int_rx_error_o = uart_cfg_int_rx_error_q;\n  assign uart_cfg_int_rx_ready_o = uart_cfg_int_rx_ready_q;\n  assign uart_cfg_int_tx_ready_o = uart_cfg_int_tx_ready_q;\n  assign uart_cfg_stop_bits_o = uart_cfg_stop_bits_q;\n  assign uart_udr_data_o = data_q[7:0];\n  assign uart_udr_wr_req_o = uart_udr_wr_q;\nendmodule\n", "answer": "//-----------------------------------------------------------------\n//                          Wishbone UART\n//                              V0.1\n//                        Ultra-Embedded.com\n//                          Copyright 2015\n//\n//                 Email: admin@ultra-embedded.com\n//\n//                         License: GPL\n// If you would like a version with a more permissive license for\n// use in closed source commercial applications please contact me\n// for details.\n//-----------------------------------------------------------------\n//\n// This file is open source HDL; you can redistribute it and/or \n// modify it under the terms of the GNU General Public License as \n// published by the Free Software Foundation; either version 2 of \n// the License, or (at your option) any later version.\n//\n// This file is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public \n// License along with this file; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n// USA\n//-----------------------------------------------------------------\n\n`include \"uart_regs_defs.v\"\n\n//-----------------------------------------------------------------\n// Module:  Auto generated register interface\n//-----------------------------------------------------------------\nmodule uart_regs\n(\n    input          clk_i,\n    input          rst_i,\n\n    // Register Ports\n    output         uart_cfg_int_rx_error_o,\n    output         uart_cfg_int_rx_ready_o,\n    output         uart_cfg_int_tx_ready_o,\n    output         uart_cfg_stop_bits_o,\n    output [8:0]   uart_cfg_div_o,\n    input          uart_usr_tx_busy_i,\n    input          uart_usr_rx_error_i,\n    input          uart_usr_rx_ready_i,\n    output [7:0]   uart_udr_data_o,\n    input  [7:0]   uart_udr_data_i,\n    output         uart_udr_wr_req_o,\n    output         uart_udr_rd_req_o,\n\n    // Wishbone interface (classic mode, synchronous slave)\n    input [7:0]    addr_i,\n    input [31:0]   data_i,\n    output [31:0]  data_o,\n    input          we_i,\n    input          stb_i,\n    output         ack_o\n);\n\n//-----------------------------------------------------------------\n// Retime write data\n//-----------------------------------------------------------------\nreg [31:0] data_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    data_q <= 32'b0;\nelse\n    data_q <= data_i;\n\n//-----------------------------------------------------------------\n// Request Logic\n//-----------------------------------------------------------------\nwire read_en_w;\nwire write_en_w;\n\nassign read_en_w  = stb_i & ~we_i & ~ack_o;\nassign write_en_w = stb_i &  we_i & ~ack_o;\n\n\n//-----------------------------------------------------------------\n// Register uart_cfg\n//-----------------------------------------------------------------\nreg uart_cfg_wr_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_cfg_wr_q <= 1'b0;\nelse if (write_en_w && (addr_i == `UART_CFG))\n    uart_cfg_wr_q <= 1'b1;\nelse\n    uart_cfg_wr_q <= 1'b0;\n\n// uart_cfg_int_rx_error [internal]\nreg        uart_cfg_int_rx_error_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_cfg_int_rx_error_q <= 1'd`UART_CFG_INT_RX_ERROR_DEFAULT;\nelse if (write_en_w && (addr_i == `UART_CFG))\n    uart_cfg_int_rx_error_q <= data_i[`UART_CFG_INT_RX_ERROR_R];\n\nassign uart_cfg_int_rx_error_o = uart_cfg_int_rx_error_q;\n\n\n// uart_cfg_int_rx_ready [internal]\nreg        uart_cfg_int_rx_ready_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_cfg_int_rx_ready_q <= 1'd`UART_CFG_INT_RX_READY_DEFAULT;\nelse if (write_en_w && (addr_i == `UART_CFG))\n    uart_cfg_int_rx_ready_q <= data_i[`UART_CFG_INT_RX_READY_R];\n\nassign uart_cfg_int_rx_ready_o = uart_cfg_int_rx_ready_q;\n\n\n// uart_cfg_int_tx_ready [internal]\nreg        uart_cfg_int_tx_ready_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_cfg_int_tx_ready_q <= 1'd`UART_CFG_INT_TX_READY_DEFAULT;\nelse if (write_en_w && (addr_i == `UART_CFG))\n    uart_cfg_int_tx_ready_q <= data_i[`UART_CFG_INT_TX_READY_R];\n\nassign uart_cfg_int_tx_ready_o = uart_cfg_int_tx_ready_q;\n\n\n// uart_cfg_stop_bits [internal]\nreg        uart_cfg_stop_bits_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_cfg_stop_bits_q <= 1'd`UART_CFG_STOP_BITS_DEFAULT;\nelse if (write_en_w && (addr_i == `UART_CFG))\n    uart_cfg_stop_bits_q <= data_i[`UART_CFG_STOP_BITS_R];\n\nassign uart_cfg_stop_bits_o = uart_cfg_stop_bits_q;\n\n\n// uart_cfg_div [internal]\nreg [8:0]  uart_cfg_div_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_cfg_div_q <= 9'd`UART_CFG_DIV_DEFAULT;\nelse if (write_en_w && (addr_i == `UART_CFG))\n    uart_cfg_div_q <= data_i[`UART_CFG_DIV_R];\n\nassign uart_cfg_div_o = uart_cfg_div_q;\n\n\n//-----------------------------------------------------------------\n// Register uart_usr\n//-----------------------------------------------------------------\nreg uart_usr_wr_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_usr_wr_q <= 1'b0;\nelse if (write_en_w && (addr_i == `UART_USR))\n    uart_usr_wr_q <= 1'b1;\nelse\n    uart_usr_wr_q <= 1'b0;\n\n\n\n\n//-----------------------------------------------------------------\n// Register uart_udr\n//-----------------------------------------------------------------\nreg uart_udr_wr_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    uart_udr_wr_q <= 1'b0;\nelse if (write_en_w && (addr_i == `UART_UDR))\n    uart_udr_wr_q <= 1'b1;\nelse\n    uart_udr_wr_q <= 1'b0;\n\n// uart_udr_data [external]\nassign uart_udr_data_o    = data_q[`UART_UDR_DATA_R];\n\n\n\n//-----------------------------------------------------------------\n// Read mux\n//-----------------------------------------------------------------\nreg [31:0] data_r;\n\nalways @ *\nbegin\n    data_r = 32'b0;\n\n    case (addr_i)\n\n    `UART_CFG :\n    begin\n        data_r[`UART_CFG_INT_RX_ERROR_R] = uart_cfg_int_rx_error_q;\n        data_r[`UART_CFG_INT_RX_READY_R] = uart_cfg_int_rx_ready_q;\n        data_r[`UART_CFG_INT_TX_READY_R] = uart_cfg_int_tx_ready_q;\n        data_r[`UART_CFG_STOP_BITS_R] = uart_cfg_stop_bits_q;\n        data_r[`UART_CFG_DIV_R] = uart_cfg_div_q;\n    end\n    `UART_USR :\n    begin\n        data_r[`UART_USR_TX_BUSY_R] = uart_usr_tx_busy_i;\n        data_r[`UART_USR_RX_ERROR_R] = uart_usr_rx_error_i;\n        data_r[`UART_USR_RX_READY_R] = uart_usr_rx_ready_i;\n    end\n    `UART_UDR :\n    begin\n        data_r[`UART_UDR_DATA_R] = uart_udr_data_i;\n    end\n    default :\n        data_r = 32'b0;\n    endcase\nend\n\n//-----------------------------------------------------------------\n// Retime read response\n//-----------------------------------------------------------------\nreg [31:0] rd_data_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    rd_data_q <= 32'b0;\nelse\n    rd_data_q <= data_r;\n\nassign data_o = rd_data_q;\n\n//-----------------------------------------------------------------\n// Wishbone Ack\n//-----------------------------------------------------------------\nreg ack_q;\n\nalways @ (posedge clk_i or posedge rst_i)\nif (rst_i)\n    ack_q <= 1'b0;\nelse if (write_en_w || read_en_w)\n    ack_q <= 1'b1;\nelse\n    ack_q <= 1'b0;\n\nassign ack_o = ack_q;\n\nassign uart_udr_rd_req_o = read_en_w & (addr_i == `UART_UDR);\n\nassign uart_udr_wr_req_o = uart_udr_wr_q;\n\nendmodule\n"}