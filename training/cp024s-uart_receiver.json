{"question": "/* Generated by Yosys 0.53 (git sha1 53c22ab7c, clang++ 15.0.0 -fPIC -O3) */\n\n(* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:9.1-143.10\" *)\nmodule receiver(i_Clock, i_Rx_Serial, o_Rx_DV, o_Rx_Byte);\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  wire _000_;\n  wire _001_;\n  wire _002_;\n  wire _003_;\n  wire _004_;\n  wire _005_;\n  wire _006_;\n  wire _007_;\n  wire _008_;\n  wire _009_;\n  wire _010_;\n  wire _011_;\n  wire _012_;\n  wire _013_;\n  wire _014_;\n  wire _015_;\n  wire _016_;\n  wire _017_;\n  wire _018_;\n  wire _019_;\n  wire _020_;\n  wire _021_;\n  wire _022_;\n  wire _023_;\n  wire _024_;\n  wire _025_;\n  wire _026_;\n  wire _027_;\n  wire _028_;\n  wire _029_;\n  wire _030_;\n  wire _031_;\n  wire _032_;\n  wire _033_;\n  wire _034_;\n  wire _035_;\n  wire _036_;\n  wire _037_;\n  wire _038_;\n  wire _039_;\n  wire _040_;\n  wire _041_;\n  wire _042_;\n  wire _043_;\n  wire _044_;\n  wire _045_;\n  wire _046_;\n  wire _047_;\n  wire _048_;\n  wire _049_;\n  wire _050_;\n  wire _051_;\n  wire _052_;\n  wire _053_;\n  wire _054_;\n  wire _055_;\n  wire _056_;\n  wire _057_;\n  wire _058_;\n  wire _059_;\n  wire _060_;\n  wire _061_;\n  wire _062_;\n  wire _063_;\n  wire _064_;\n  wire _065_;\n  wire _066_;\n  wire _067_;\n  wire _068_;\n  wire _069_;\n  wire _070_;\n  wire _071_;\n  wire _072_;\n  wire _073_;\n  wire _074_;\n  wire _075_;\n  wire _076_;\n  wire _077_;\n  wire _078_;\n  wire _079_;\n  wire _080_;\n  wire _081_;\n  wire _082_;\n  wire _083_;\n  wire _084_;\n  wire _085_;\n  wire _086_;\n  wire _087_;\n  wire _088_;\n  wire _089_;\n  wire _090_;\n  wire _091_;\n  wire _092_;\n  wire _093_;\n  wire _094_;\n  wire _095_;\n  wire _096_;\n  wire _097_;\n  wire _098_;\n  wire _099_;\n  wire _100_;\n  wire _101_;\n  wire _102_;\n  wire _103_;\n  wire _104_;\n  wire _105_;\n  wire _106_;\n  wire _107_;\n  wire _108_;\n  wire _109_;\n  wire _110_;\n  wire _111_;\n  wire _112_;\n  wire _113_;\n  wire _114_;\n  wire _115_;\n  wire _116_;\n  wire _117_;\n  wire _118_;\n  wire _119_;\n  wire _120_;\n  wire _121_;\n  wire _122_;\n  wire _123_;\n  wire _124_;\n  wire _125_;\n  wire _126_;\n  wire _127_;\n  wire _128_;\n  wire _129_;\n  wire _130_;\n  wire _131_;\n  wire _132_;\n  wire _133_;\n  wire _134_;\n  wire _135_;\n  wire _136_;\n  wire _137_;\n  wire _138_;\n  wire _139_;\n  wire _140_;\n  wire _141_;\n  wire _142_;\n  wire _143_;\n  wire _144_;\n  wire _145_;\n  wire _146_;\n  wire _147_;\n  wire _148_;\n  wire _149_;\n  wire _150_;\n  wire _151_;\n  wire _152_;\n  wire _153_;\n  wire _154_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _155_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _156_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _157_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _158_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _159_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _160_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _161_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0\" *)\n  wire _162_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:94.21-94.36|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:270.26-270.27\" *)\n  wire [2:0] _163_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0|/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:46.7-137.14|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:576.21-576.22\" *)\n  wire [7:0] _164_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:0.0-0.0|/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:46.7-137.14|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:576.21-576.22\" *)\n  wire [2:0] _165_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:10.17-10.24\" *)\n  input i_Clock;\n  wire i_Clock;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:11.17-11.28\" *)\n  input i_Rx_Serial;\n  wire i_Rx_Serial;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:13.17-13.26\" *)\n  output [7:0] o_Rx_Byte;\n  wire [7:0] o_Rx_Byte;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:12.17-12.24\" *)\n  output o_Rx_DV;\n  wire o_Rx_DV;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:27.17-27.28\" *)\n  reg [2:0] r_Bit_Index = 3'h0;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:26.17-26.30\" *)\n  reg [7:0] r_Clock_Count = 8'h00;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:28.17-28.26\" *)\n  reg [7:0] r_Rx_Byte = 8'h00;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:29.17-29.24\" *)\n  reg r_Rx_DV = 1'h0;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:24.17-24.26\" *)\n  reg r_Rx_Data = 1'h1;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:23.17-23.28\" *)\n  reg r_Rx_Data_R = 1'h1;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:30.17-30.26\" *)\n  reg [2:0] r_SM_Main = 3'h0;\n  assign _114_ = r_Clock_Count[5] & r_Clock_Count[6];\n  assign _115_ = r_Clock_Count[6] & ~(r_Clock_Count[5]);\n  assign _116_ = ~(r_Clock_Count[4] & r_Clock_Count[3]);\n  assign _117_ = r_Clock_Count[4] & ~(r_Clock_Count[3]);\n  assign _118_ = ~(r_Clock_Count[2] & r_Clock_Count[1]);\n  assign _119_ = _117_ & ~(_118_);\n  assign _120_ = _116_ & ~(_119_);\n  assign _121_ = _115_ & ~(_120_);\n  assign _122_ = _121_ | _114_;\n  assign _123_ = _122_ | r_Clock_Count[7];\n  assign _124_ = ~(r_SM_Main[1] & r_SM_Main[0]);\n  assign _125_ = _124_ | r_SM_Main[2];\n  assign _126_ = r_SM_Main[1] | r_SM_Main[0];\n  assign _127_ = r_SM_Main[2] & ~(_126_);\n  assign _128_ = ~r_SM_Main[2];\n  assign _129_ = _128_ & ~(_126_);\n  assign _000_ = ~(_129_ | _127_);\n  assign _130_ = ~_000_;\n  assign _001_ = _125_ ? _130_ : _123_;\n  assign _131_ = r_SM_Main[0] | ~(r_SM_Main[1]);\n  assign _132_ = _128_ & ~(_131_);\n  assign _002_ = _132_ & _123_;\n  assign _003_ = _132_ ? _123_ : _129_;\n  assign _094_ = ~(r_Bit_Index[1] & r_Bit_Index[0]);\n  assign _133_ = r_Bit_Index[2] & ~(_094_);\n  assign _005_ = _133_ | ~(_132_);\n  assign _134_ = _125_ & ~(_132_);\n  assign _135_ = _129_ | ~(_134_);\n  assign _136_ = r_SM_Main[1] | ~(r_SM_Main[0]);\n  assign _137_ = _128_ & ~(_136_);\n  assign _138_ = r_Clock_Count[0] & r_Clock_Count[1];\n  assign _139_ = r_Clock_Count[2] | ~(r_Clock_Count[3]);\n  assign _140_ = _138_ & ~(_139_);\n  assign _141_ = r_Clock_Count[4] | ~(r_Clock_Count[5]);\n  assign _142_ = r_Clock_Count[6] | r_Clock_Count[7];\n  assign _143_ = _142_ | _141_;\n  assign _144_ = _140_ & ~(_143_);\n  assign _145_ = ~(_144_ & r_Rx_Data);\n  assign _004_ = _137_ ? _145_ : _135_;\n  assign _146_ = _125_ | _123_;\n  assign _147_ = ~(_133_ & _123_);\n  assign _148_ = _147_ | ~(_132_);\n  assign _149_ = ~(_148_ & _146_);\n  assign _150_ = _137_ & ~(_144_);\n  assign _151_ = _129_ & ~(r_Rx_Data);\n  assign _152_ = _151_ | _150_;\n  assign _153_ = _152_ | _149_;\n  assign _154_ = _137_ | _129_;\n  assign _006_ = _134_ & ~(_154_);\n  assign _165_[0] = _153_ & ~(_006_);\n  assign _007_ = _146_ & ~(_132_);\n  assign _008_ = ~r_Rx_Data;\n  assign _009_ = ~(_144_ & _008_);\n  assign _010_ = _137_ & ~(_009_);\n  assign _011_ = _010_ | ~(_007_);\n  assign _165_[1] = _011_ & ~(_006_);\n  assign _165_[2] = _123_ & ~(_125_);\n  assign _012_ = _123_ | r_Clock_Count[0];\n  assign _013_ = ~(_012_ | _134_);\n  assign _014_ = _144_ | r_Clock_Count[0];\n  assign _015_ = _137_ & ~(_014_);\n  assign _016_ = _015_ | _013_;\n  assign _017_ = _137_ | ~(_134_);\n  assign _164_[0] = _017_ & _016_;\n  assign _018_ = ~(r_Clock_Count[0] ^ r_Clock_Count[1]);\n  assign _019_ = _018_ | _123_;\n  assign _020_ = _019_ | _134_;\n  assign _021_ = _018_ | _144_;\n  assign _022_ = _137_ & ~(_021_);\n  assign _023_ = _020_ & ~(_022_);\n  assign _164_[1] = _017_ & ~(_023_);\n  assign _024_ = ~(_138_ ^ r_Clock_Count[2]);\n  assign _025_ = _024_ | _123_;\n  assign _026_ = _025_ | _134_;\n  assign _027_ = _024_ | _144_;\n  assign _028_ = _137_ & ~(_027_);\n  assign _029_ = _026_ & ~(_028_);\n  assign _164_[2] = _017_ & ~(_029_);\n  assign _030_ = ~(_138_ & r_Clock_Count[2]);\n  assign _031_ = _030_ ^ r_Clock_Count[3];\n  assign _032_ = _031_ | _123_;\n  assign _033_ = _032_ | _134_;\n  assign _034_ = _031_ | _144_;\n  assign _035_ = _137_ & ~(_034_);\n  assign _036_ = _033_ & ~(_035_);\n  assign _164_[3] = _017_ & ~(_036_);\n  assign _037_ = ~(r_Clock_Count[2] & r_Clock_Count[3]);\n  assign _038_ = _138_ & ~(_037_);\n  assign _039_ = ~(_038_ ^ r_Clock_Count[4]);\n  assign _040_ = _039_ | _123_;\n  assign _041_ = _040_ | _134_;\n  assign _042_ = _039_ | _144_;\n  assign _043_ = _137_ & ~(_042_);\n  assign _044_ = _041_ & ~(_043_);\n  assign _164_[4] = _017_ & ~(_044_);\n  assign _045_ = ~(_038_ & r_Clock_Count[4]);\n  assign _046_ = _045_ ^ r_Clock_Count[5];\n  assign _047_ = _046_ | _123_;\n  assign _048_ = _047_ | _134_;\n  assign _049_ = _046_ | _144_;\n  assign _050_ = _137_ & ~(_049_);\n  assign _051_ = _048_ & ~(_050_);\n  assign _164_[5] = _017_ & ~(_051_);\n  assign _052_ = r_Clock_Count[5] & r_Clock_Count[4];\n  assign _053_ = ~(_052_ & _038_);\n  assign _054_ = _053_ ^ r_Clock_Count[6];\n  assign _055_ = _054_ | _123_;\n  assign _056_ = _055_ | _134_;\n  assign _057_ = _054_ | _144_;\n  assign _058_ = _137_ & ~(_057_);\n  assign _059_ = _056_ & ~(_058_);\n  assign _164_[6] = _017_ & ~(_059_);\n  assign _060_ = _053_ | ~(r_Clock_Count[6]);\n  assign _061_ = _060_ ^ r_Clock_Count[7];\n  assign _062_ = _061_ | _123_;\n  assign _063_ = _062_ | _134_;\n  assign _064_ = _061_ | _144_;\n  assign _065_ = _137_ & ~(_064_);\n  assign _066_ = _063_ & ~(_065_);\n  assign _164_[7] = _017_ & ~(_066_);\n  assign _163_[0] = ~r_Bit_Index[0];\n  assign _067_ = ~r_Bit_Index[2];\n  assign _068_ = r_Bit_Index[1] | r_Bit_Index[0];\n  assign _069_ = _067_ & ~(_068_);\n  assign _070_ = _069_ & ~(r_Bit_Index[0]);\n  assign _071_ = ~(r_Bit_Index[1] ^ r_Bit_Index[0]);\n  assign _163_[1] = ~_071_;\n  assign _072_ = _070_ & ~(_163_[1]);\n  assign _073_ = _068_ ^ _067_;\n  assign _074_ = ~_073_;\n  assign _075_ = _072_ & ~(_074_);\n  assign _076_ = r_Rx_Byte[0] & ~(_075_);\n  assign _077_ = ~(_069_ & r_Rx_Data);\n  assign _078_ = _077_ | r_Bit_Index[0];\n  assign _079_ = _078_ | _163_[1];\n  assign _080_ = _073_ & ~(_079_);\n  assign _155_ = _080_ | _076_;\n  assign _081_ = r_Bit_Index[1] | ~(r_Bit_Index[0]);\n  assign _082_ = ~(_081_ | _073_);\n  assign _083_ = r_Rx_Byte[1] & ~(_082_);\n  assign _084_ = ~(r_Bit_Index[0] & r_Rx_Data);\n  assign _085_ = _084_ | _071_;\n  assign _086_ = ~(_085_ | _073_);\n  assign _156_ = _086_ | _083_;\n  assign _087_ = r_Bit_Index[0] | ~(r_Bit_Index[1]);\n  assign _088_ = ~(_087_ | _073_);\n  assign _089_ = r_Rx_Byte[2] & ~(_088_);\n  assign _090_ = _069_ | _008_;\n  assign _091_ = _090_ | r_Bit_Index[0];\n  assign _092_ = _091_ | _071_;\n  assign _093_ = _074_ & ~(_092_);\n  assign _157_ = _093_ | _089_;\n  assign _095_ = ~(_094_ | _073_);\n  assign _096_ = r_Rx_Byte[3] & ~(_095_);\n  assign _097_ = _084_ | ~(_071_);\n  assign _098_ = ~(_097_ | _073_);\n  assign _158_ = _098_ | _096_;\n  assign _099_ = _069_ | r_Bit_Index[0];\n  assign _100_ = _099_ | _163_[1];\n  assign _101_ = _074_ & ~(_100_);\n  assign _102_ = r_Rx_Byte[4] & ~(_101_);\n  assign _103_ = _091_ | _163_[1];\n  assign _104_ = _074_ & ~(_103_);\n  assign _159_ = _104_ | _102_;\n  assign _105_ = _073_ & ~(_081_);\n  assign _106_ = r_Rx_Byte[5] & ~(_105_);\n  assign _107_ = _073_ & ~(_085_);\n  assign _160_ = _107_ | _106_;\n  assign _108_ = _073_ & ~(_087_);\n  assign _109_ = r_Rx_Byte[6] & ~(_108_);\n  assign _110_ = _073_ & ~(_092_);\n  assign _161_ = _110_ | _109_;\n  assign _111_ = _073_ & ~(_094_);\n  assign _112_ = r_Rx_Byte[7] & ~(_111_);\n  assign _113_ = _073_ & ~(_097_);\n  assign _162_ = _113_ | _112_;\n  assign _163_[2] = _094_ ^ _067_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_001_) r_Rx_DV <= _000_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_003_)\n      if (_005_) r_Bit_Index[0] <= 1'h0;\n      else r_Bit_Index[0] <= _163_[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_003_)\n      if (_005_) r_Bit_Index[1] <= 1'h0;\n      else r_Bit_Index[1] <= _163_[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_003_)\n      if (_005_) r_Bit_Index[2] <= 1'h0;\n      else r_Bit_Index[2] <= _163_[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[0] <= _164_[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[1] <= _164_[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[2] <= _164_[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[3] <= _164_[3];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[4] <= _164_[4];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[5] <= _164_[5];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[6] <= _164_[6];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Clock_Count[7] <= _164_[7];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[0] <= _155_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[1] <= _156_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[2] <= _157_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[3] <= _158_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[4] <= _159_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[5] <= _160_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[6] <= _161_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    if (_002_) r_Rx_Byte[7] <= _162_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    r_SM_Main[0] <= _165_[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    r_SM_Main[1] <= _165_[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:43.3-138.8\" *)\n  always @(posedge i_Clock)\n    r_SM_Main[2] <= _165_[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:35.3-39.8\" *)\n  always @(posedge i_Clock)\n    r_Rx_Data_R <= i_Rx_Serial;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/receiver.v:35.3-39.8\" *)\n  always @(posedge i_Clock)\n    r_Rx_Data <= r_Rx_Data_R;\n  assign o_Rx_Byte = r_Rx_Byte;\n  assign o_Rx_DV = r_Rx_DV;\nendmodule\n", "answer": "`timescale 1ns / 1ps\n\n//////////////////////////////////////////////////////////////////////////////////\n// Set Parameter CLKS_PER_BIT as follows:\n// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)\n// Example: 10 MHz Clock, 115200 baud UART\n// (10000000)/(115200) = 87\n\nmodule receiver (\n   input        i_Clock,\n   input        i_Rx_Serial,\n   output       o_Rx_DV,\n   output [7:0] o_Rx_Byte\n   );\n    \n  parameter CLKS_PER_BIT   =87;\n  parameter s_IDLE         = 3'b000;\n  parameter s_RX_START_BIT = 3'b001;\n  parameter s_RX_DATA_BITS = 3'b010;\n  parameter s_RX_STOP_BIT  = 3'b011;\n  parameter s_CLEANUP      = 3'b100;\n   \n  reg           r_Rx_Data_R = 1'b1;\n  reg           r_Rx_Data   = 1'b1;\n   \n  reg [7:0]     r_Clock_Count = 0;\n  reg [2:0]     r_Bit_Index   = 0; //8 bits total\n  reg [7:0]     r_Rx_Byte     = 0;\n  reg           r_Rx_DV       = 0;\n  reg [2:0]     r_SM_Main     = 0;\n   \n  // Purpose: Double-register the incoming data.\n  // This allows it to be used in the UART RX Clock Domain.\n  // (It removes problems caused by metastability)\n  always @(posedge i_Clock)\n    begin\n      r_Rx_Data_R <= i_Rx_Serial;\n      r_Rx_Data   <= r_Rx_Data_R;\n    end\n   \n   \n  // Purpose: Control RX state machine\n  always @(posedge i_Clock)\n    begin\n       \n      case (r_SM_Main)\n        s_IDLE :\n          begin\n            r_Rx_DV       <= 1'b0;\n            r_Clock_Count <= 0;\n            r_Bit_Index   <= 0;\n             \n            if (r_Rx_Data == 1'b0)          // Start bit detected\n              r_SM_Main <= s_RX_START_BIT;\n            else\n              r_SM_Main <= s_IDLE;\n          end\n         \n        // Check middle of start bit to make sure it's still low\n        s_RX_START_BIT :\n          begin\n            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)\n              begin\n                if (r_Rx_Data == 1'b0)\n                  begin\n                    r_Clock_Count <= 0;  // reset counter, found the middle\n                    r_SM_Main     <= s_RX_DATA_BITS;\n                  end\n                else\n                  r_SM_Main <= s_IDLE;\n              end\n            else\n              begin\n                r_Clock_Count <= r_Clock_Count + 1;\n                r_SM_Main     <= s_RX_START_BIT;\n              end\n          end // case: s_RX_START_BIT\n         \n         \n        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data\n        s_RX_DATA_BITS :\n          begin\n            if (r_Clock_Count < CLKS_PER_BIT-1)\n              begin\n                r_Clock_Count <= r_Clock_Count + 1;\n                r_SM_Main     <= s_RX_DATA_BITS;\n              end\n            else\n              begin\n                r_Clock_Count          <= 0;\n                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;\n                 \n                // Check if we have received all bits\n                if (r_Bit_Index < 7)\n                  begin\n                    r_Bit_Index <= r_Bit_Index + 1;\n                    r_SM_Main   <= s_RX_DATA_BITS;\n                  end\n                else\n                  begin\n                    r_Bit_Index <= 0;\n                    r_SM_Main   <= s_RX_STOP_BIT;\n                  end\n              end\n          end // case: s_RX_DATA_BITS\n     \n     \n        // Receive Stop bit.  Stop bit = 1\n        s_RX_STOP_BIT :\n          begin\n            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish\n            if (r_Clock_Count < CLKS_PER_BIT-1)\n              begin\n                r_Clock_Count <= r_Clock_Count + 1;\n                r_SM_Main     <= s_RX_STOP_BIT;\n              end\n            else\n              begin\n                r_Rx_DV       <= 1'b1;\n                r_Clock_Count <= 0;\n                r_SM_Main     <= s_CLEANUP;\n              end\n          end // case: s_RX_STOP_BIT\n     \n         \n        // Stay here 1 clock\n        s_CLEANUP :\n          begin\n            r_SM_Main <= s_IDLE;\n            r_Rx_DV   <= 1'b0;\n          end\n         \n         \n        default :\n          r_SM_Main <= s_IDLE;\n         \n      endcase\n    end   \n   \n  assign o_Rx_DV   = r_Rx_DV;\n  assign o_Rx_Byte = r_Rx_Byte;\n   \nendmodule // uart_rx\n"}