{"question": "/* Generated by Yosys 0.53 (git sha1 53c22ab7c, clang++ 15.0.0 -fPIC -O3) */\n\n(* dynports =  1  *)\n(* src = \"/Users/arades/code/cores/uart/rtl/uart.v:34.1-345.10\" *)\nmodule uart(clk_i, rst_i, bit_div_i, stop_bits_i, wr_i, data_i, tx_busy_o, rd_i, data_o, rx_ready_o, rx_err_o, rxd_i, txd_o);\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:180.1-193.29\" *)\n  wire [3:0] _000_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  wire _001_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  wire [8:0] _002_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  wire _003_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  wire _004_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  wire [7:0] _005_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  wire _006_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  wire [8:0] _007_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  wire [7:0] _008_;\n  wire _009_;\n  wire _010_;\n  wire _011_;\n  wire _012_;\n  wire _013_;\n  wire _014_;\n  wire _015_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:299.10-299.34\" *)\n  wire _016_;\n  wire _017_;\n  wire _018_;\n  wire _019_;\n  wire _020_;\n  wire _021_;\n  wire _022_;\n  wire _023_;\n  wire _024_;\n  wire _025_;\n  wire _026_;\n  wire _027_;\n  wire _028_;\n  wire _029_;\n  wire _030_;\n  wire _031_;\n  wire _032_;\n  wire _033_;\n  wire _034_;\n  wire _035_;\n  wire _036_;\n  wire _037_;\n  wire _038_;\n  wire _039_;\n  wire _040_;\n  wire _041_;\n  wire _042_;\n  wire _043_;\n  wire _044_;\n  wire _045_;\n  wire _046_;\n  wire _047_;\n  wire _048_;\n  wire _049_;\n  wire _050_;\n  wire _051_;\n  wire _052_;\n  wire _053_;\n  wire _054_;\n  wire _055_;\n  wire _056_;\n  wire _057_;\n  wire _058_;\n  wire _059_;\n  wire _060_;\n  wire _061_;\n  wire _062_;\n  wire _063_;\n  wire _064_;\n  wire _065_;\n  wire _066_;\n  wire _067_;\n  wire _068_;\n  wire _069_;\n  wire _070_;\n  wire _071_;\n  wire _072_;\n  wire _073_;\n  wire _074_;\n  wire _075_;\n  wire _076_;\n  wire _077_;\n  wire _078_;\n  wire _079_;\n  wire _080_;\n  wire _081_;\n  wire _082_;\n  wire _083_;\n  wire _084_;\n  wire _085_;\n  wire _086_;\n  wire _087_;\n  wire _088_;\n  wire _089_;\n  wire _090_;\n  wire _091_;\n  wire _092_;\n  wire _093_;\n  wire _094_;\n  wire _095_;\n  wire _096_;\n  wire _097_;\n  wire _098_;\n  wire _099_;\n  wire _100_;\n  wire _101_;\n  wire _102_;\n  wire _103_;\n  wire _104_;\n  wire _105_;\n  wire _106_;\n  wire _107_;\n  wire _108_;\n  wire _109_;\n  wire _110_;\n  wire _111_;\n  wire _112_;\n  wire _113_;\n  wire _114_;\n  wire _115_;\n  wire _116_;\n  wire _117_;\n  wire _118_;\n  wire _119_;\n  wire _120_;\n  wire _121_;\n  wire _122_;\n  wire _123_;\n  wire _124_;\n  wire _125_;\n  wire _126_;\n  wire _127_;\n  wire _128_;\n  wire _129_;\n  wire _130_;\n  wire _131_;\n  wire _132_;\n  wire _133_;\n  wire _134_;\n  wire _135_;\n  wire _136_;\n  wire _137_;\n  wire _138_;\n  wire _139_;\n  wire _140_;\n  wire _141_;\n  wire _142_;\n  wire _143_;\n  wire _144_;\n  wire _145_;\n  wire _146_;\n  wire _147_;\n  wire _148_;\n  wire _149_;\n  wire _150_;\n  wire _151_;\n  wire _152_;\n  wire _153_;\n  wire _154_;\n  wire _155_;\n  wire _156_;\n  wire _157_;\n  wire _158_;\n  wire _159_;\n  wire _160_;\n  wire _161_;\n  wire _162_;\n  wire _163_;\n  wire _164_;\n  wire _165_;\n  wire _166_;\n  wire _167_;\n  wire _168_;\n  wire _169_;\n  wire _170_;\n  wire _171_;\n  wire _172_;\n  wire _173_;\n  wire _174_;\n  wire _175_;\n  wire _176_;\n  wire _177_;\n  wire _178_;\n  wire _179_;\n  wire _180_;\n  wire _181_;\n  wire _182_;\n  wire _183_;\n  wire _184_;\n  wire _185_;\n  wire _186_;\n  wire _187_;\n  wire _188_;\n  wire _189_;\n  wire _190_;\n  wire _191_;\n  wire _192_;\n  wire _193_;\n  wire _194_;\n  wire _195_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:52.32-52.41\" *)\n  input [8:0] bit_div_i;\n  wire [8:0] bit_div_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:48.19-48.24\" *)\n  input clk_i;\n  wire clk_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:57.19-57.25\" *)\n  input [7:0] data_i;\n  wire [7:0] data_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:62.19-62.25\" *)\n  output [7:0] data_o;\n  wire [7:0] data_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:61.19-61.23\" *)\n  input rd_i;\n  wire rd_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:49.19-49.24\" *)\n  input rst_i;\n  wire rst_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:89.27-89.36\" *)\n  reg [3:0] rx_bits_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:93.27-93.36\" *)\n  reg rx_busy_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:90.27-90.37\" *)\n  reg [8:0] rx_count_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:88.27-88.36\" *)\n  reg [7:0] rx_data_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:65.19-65.27\" *)\n  output rx_err_o;\n  wire rx_err_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:95.27-95.35\" *)\n  reg rx_err_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:63.19-63.29\" *)\n  output rx_ready_o;\n  wire rx_ready_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:92.27-92.37\" *)\n  reg rx_ready_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:91.27-91.41\" *)\n  reg [7:0] rx_shift_reg_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:68.19-68.24\" *)\n  input rxd_i;\n  wire rxd_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:100.5-100.13\" *)\n  reg rxd_ms_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:87.27-87.32\" *)\n  reg rxd_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:53.19-53.30\" *)\n  input stop_bits_i;\n  wire stop_bits_i;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:81.27-81.36\" *)\n  reg [3:0] tx_bits_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:58.19-58.28\" *)\n  output tx_busy_o;\n  wire tx_busy_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:80.27-80.36\" *)\n  reg tx_busy_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:82.27-82.37\" *)\n  reg [8:0] tx_count_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:83.27-83.41\" *)\n  reg [7:0] tx_shift_reg_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:69.19-69.24\" *)\n  output txd_o;\n  wire txd_o;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:84.27-84.32\" *)\n  reg txd_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:310.5-310.10\" *)\n  wire txd_r;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:56.19-56.23\" *)\n  input wr_i;\n  wire wr_i;\n  assign _017_ = ~rx_count_q[8];\n  assign _018_ = ~(rx_count_q[1] | rx_count_q[0]);\n  assign _019_ = ~(rx_count_q[3] | rx_count_q[2]);\n  assign _020_ = _019_ & _018_;\n  assign _021_ = ~(rx_count_q[5] | rx_count_q[4]);\n  assign _022_ = ~(rx_count_q[7] | rx_count_q[6]);\n  assign _023_ = _022_ & _021_;\n  assign _024_ = ~(_023_ & _020_);\n  assign _025_ = _017_ & ~(_024_);\n  assign _001_ = ~(_025_ & rx_busy_q);\n  assign _026_ = ~rx_busy_q;\n  assign _010_ = _025_ | _026_;\n  assign _009_ = _010_ | ~(_025_);\n  assign _027_ = ~stop_bits_i;\n  assign _028_ = rx_bits_q[1] | ~(rx_bits_q[0]);\n  assign _029_ = rx_bits_q[2] | ~(rx_bits_q[3]);\n  assign _030_ = _029_ | _028_;\n  assign _031_ = _027_ & ~(_030_);\n  assign _032_ = rx_bits_q[0] | ~(rx_bits_q[1]);\n  assign _033_ = _032_ | _029_;\n  assign _034_ = stop_bits_i & ~(_033_);\n  assign _035_ = _034_ | _031_;\n  assign _036_ = ~(rx_bits_q[1] | rx_bits_q[0]);\n  assign _037_ = rx_bits_q[2] | rx_bits_q[3];\n  assign _038_ = _036_ & ~(_037_);\n  assign _039_ = ~_038_;\n  assign _040_ = _039_ | _001_;\n  assign _041_ = _040_ | _035_;\n  assign _042_ = _031_ | ~(_034_);\n  assign _043_ = ~(_042_ | _001_);\n  assign _044_ = _041_ & ~(_043_);\n  assign _045_ = rxd_q | rx_busy_q;\n  assign _046_ = _001_ ? _045_ : _031_;\n  assign _013_ = _044_ & ~(_046_);\n  assign _047_ = ~bit_div_i[8];\n  assign _048_ = bit_div_i[1] | bit_div_i[0];\n  assign _049_ = bit_div_i[3] | bit_div_i[2];\n  assign _050_ = _049_ | _048_;\n  assign _051_ = bit_div_i[5] | bit_div_i[4];\n  assign _052_ = bit_div_i[7] | bit_div_i[6];\n  assign _053_ = _052_ | _051_;\n  assign _054_ = _053_ | _050_;\n  assign _055_ = _047_ & ~(_054_);\n  assign _056_ = ~(tx_count_q[1] | tx_count_q[0]);\n  assign _057_ = ~(tx_count_q[3] | tx_count_q[2]);\n  assign _058_ = _057_ & _056_;\n  assign _059_ = ~(tx_count_q[5] | tx_count_q[4]);\n  assign _060_ = ~(tx_count_q[7] | tx_count_q[6]);\n  assign _061_ = _060_ & _059_;\n  assign _062_ = ~(_061_ & _058_);\n  assign _063_ = ~(_062_ | tx_count_q[8]);\n  assign _064_ = ~tx_busy_q;\n  assign _065_ = _063_ | _064_;\n  assign _011_ = _065_ | ~(_063_);\n  assign _014_ = _035_ & ~(_001_);\n  assign _066_ = ~rxd_q;\n  assign _067_ = rx_busy_q ? _025_ : _066_;\n  assign _068_ = _031_ | rxd_q;\n  assign _069_ = _034_ | _001_;\n  assign _070_ = _069_ | _068_;\n  assign _071_ = _038_ & ~(_070_);\n  assign _072_ = _038_ | _001_;\n  assign _073_ = ~(_072_ | _035_);\n  assign _074_ = _073_ | _071_;\n  assign _012_ = _067_ & ~(_074_);\n  assign _075_ = ~(tx_bits_q[0] | tx_bits_q[1]);\n  assign _076_ = tx_bits_q[2] | tx_bits_q[3];\n  assign _077_ = _075_ & ~(_076_);\n  assign _078_ = _063_ & ~(_077_);\n  assign _015_ = tx_busy_q ? _078_ : wr_i;\n  assign _016_ = _063_ & ~(_064_);\n  assign _079_ = tx_bits_q[0] & ~(tx_bits_q[1]);\n  assign _080_ = tx_bits_q[2] | ~(tx_bits_q[3]);\n  assign _081_ = _079_ & ~(_080_);\n  assign _082_ = tx_bits_q[0] | ~(tx_bits_q[1]);\n  assign _083_ = ~(_082_ | _080_);\n  assign _084_ = _083_ | _081_;\n  assign _085_ = _084_ | tx_shift_reg_q[0];\n  assign _086_ = _085_ & ~(_077_);\n  assign txd_r = _086_ | _064_;\n  assign _087_ = ~_081_;\n  assign _088_ = ~_083_;\n  assign _089_ = stop_bits_i ? _088_ : _087_;\n  assign _192_ = _089_ & ~(tx_bits_q[0]);\n  assign _090_ = _082_ & ~(_079_);\n  assign _193_ = _089_ & ~(_090_);\n  assign _091_ = tx_bits_q[0] & tx_bits_q[1];\n  assign _092_ = ~(_091_ ^ tx_bits_q[2]);\n  assign _194_ = _089_ & ~(_092_);\n  assign _093_ = ~(_091_ & tx_bits_q[2]);\n  assign _094_ = _093_ ^ tx_bits_q[3];\n  assign _195_ = _089_ & ~(_094_);\n  assign _008_[0] = tx_busy_q ? tx_shift_reg_q[1] : data_i[0];\n  assign _008_[1] = tx_busy_q ? tx_shift_reg_q[2] : data_i[1];\n  assign _008_[2] = tx_busy_q ? tx_shift_reg_q[3] : data_i[2];\n  assign _008_[3] = tx_busy_q ? tx_shift_reg_q[4] : data_i[3];\n  assign _008_[4] = tx_busy_q ? tx_shift_reg_q[5] : data_i[4];\n  assign _008_[5] = tx_busy_q ? tx_shift_reg_q[6] : data_i[5];\n  assign _008_[6] = tx_busy_q ? tx_shift_reg_q[7] : data_i[6];\n  assign _008_[7] = data_i[7] & ~(tx_busy_q);\n  assign _095_ = ~(_083_ & _063_);\n  assign _096_ = ~(_081_ & _063_);\n  assign _097_ = stop_bits_i ? _095_ : _096_;\n  assign _006_ = tx_busy_q ? _097_ : wr_i;\n  assign _098_ = ~tx_count_q[0];\n  assign _099_ = _063_ ? bit_div_i[0] : _098_;\n  assign _007_[0] = tx_busy_q ? _099_ : bit_div_i[0];\n  assign _100_ = ~(tx_count_q[1] ^ tx_count_q[0]);\n  assign _101_ = _063_ ? bit_div_i[1] : _100_;\n  assign _007_[1] = tx_busy_q ? _101_ : bit_div_i[1];\n  assign _102_ = _056_ ^ tx_count_q[2];\n  assign _103_ = _063_ ? bit_div_i[2] : _102_;\n  assign _007_[2] = tx_busy_q ? _103_ : bit_div_i[2];\n  assign _104_ = _056_ & ~(tx_count_q[2]);\n  assign _105_ = _104_ ^ tx_count_q[3];\n  assign _106_ = _063_ ? bit_div_i[3] : _105_;\n  assign _007_[3] = tx_busy_q ? _106_ : bit_div_i[3];\n  assign _107_ = _057_ & ~(_056_);\n  assign _108_ = _057_ & ~(_107_);\n  assign _109_ = _108_ ^ tx_count_q[4];\n  assign _110_ = _063_ ? bit_div_i[4] : _109_;\n  assign _007_[4] = tx_busy_q ? _110_ : bit_div_i[4];\n  assign _111_ = _108_ & ~(tx_count_q[4]);\n  assign _112_ = _111_ ^ tx_count_q[5];\n  assign _113_ = _063_ ? bit_div_i[5] : _112_;\n  assign _007_[5] = tx_busy_q ? _113_ : bit_div_i[5];\n  assign _114_ = ~tx_count_q[6];\n  assign _115_ = _059_ & ~(_108_);\n  assign _116_ = _115_ | ~(_059_);\n  assign _117_ = _116_ ^ _114_;\n  assign _118_ = _063_ ? bit_div_i[6] : _117_;\n  assign _007_[6] = tx_busy_q ? _118_ : bit_div_i[6];\n  assign _119_ = _114_ & ~(_116_);\n  assign _120_ = _119_ ^ tx_count_q[7];\n  assign _121_ = _063_ ? bit_div_i[7] : _120_;\n  assign _007_[7] = tx_busy_q ? _121_ : bit_div_i[7];\n  assign _122_ = _060_ & ~(_059_);\n  assign _123_ = _060_ & ~(_122_);\n  assign _124_ = _061_ & ~(_108_);\n  assign _125_ = _123_ & ~(_124_);\n  assign _126_ = _125_ ^ tx_count_q[8];\n  assign _127_ = _063_ ? bit_div_i[8] : _126_;\n  assign _007_[8] = tx_busy_q ? _127_ : bit_div_i[8];\n  assign _128_ = rx_err_q & ~(rd_i);\n  assign _129_ = _038_ & ~(_066_);\n  assign _130_ = _129_ | _128_;\n  assign _131_ = _128_ | _066_;\n  assign _132_ = _035_ ? _131_ : _130_;\n  assign _003_ = _001_ ? _128_ : _132_;\n  assign _133_ = rx_ready_q & ~(rd_i);\n  assign _134_ = _035_ ? rxd_q : _133_;\n  assign _004_ = _001_ ? _133_ : _134_;\n  assign _184_ = rx_shift_reg_q[0] & rxd_q;\n  assign _185_ = rx_shift_reg_q[1] & rxd_q;\n  assign _186_ = rx_shift_reg_q[2] & rxd_q;\n  assign _187_ = rx_shift_reg_q[3] & rxd_q;\n  assign _188_ = rx_shift_reg_q[4] & rxd_q;\n  assign _189_ = rx_shift_reg_q[5] & rxd_q;\n  assign _190_ = rx_shift_reg_q[6] & rxd_q;\n  assign _191_ = rx_shift_reg_q[7] & rxd_q;\n  assign _135_ = _055_ & ~(rx_busy_q);\n  assign _136_ = ~(_035_ | rx_bits_q[0]);\n  assign _000_[0] = _001_ ? _135_ : _136_;\n  assign _137_ = _032_ & _028_;\n  assign _138_ = _137_ | _035_;\n  assign _000_[1] = ~(_138_ | _001_);\n  assign _139_ = rx_bits_q[1] & rx_bits_q[0];\n  assign _140_ = ~(_139_ ^ rx_bits_q[2]);\n  assign _141_ = _140_ | _035_;\n  assign _000_[2] = ~(_141_ | _001_);\n  assign _142_ = ~(_139_ & rx_bits_q[2]);\n  assign _143_ = _142_ ^ rx_bits_q[3];\n  assign _144_ = _143_ | _035_;\n  assign _000_[3] = ~(_144_ | _001_);\n  assign _005_[0] = rx_shift_reg_q[1] & ~(_001_);\n  assign _005_[1] = rx_shift_reg_q[2] & ~(_001_);\n  assign _005_[2] = rx_shift_reg_q[3] & ~(_001_);\n  assign _005_[3] = rx_shift_reg_q[4] & ~(_001_);\n  assign _005_[4] = rx_shift_reg_q[5] & ~(_001_);\n  assign _005_[5] = rx_shift_reg_q[6] & ~(_001_);\n  assign _005_[6] = rx_shift_reg_q[7] & ~(_001_);\n  assign _005_[7] = rxd_q & ~(_001_);\n  assign _145_ = ~rx_count_q[0];\n  assign _146_ = bit_div_i[0] & ~(_035_);\n  assign _147_ = _025_ ? _146_ : _145_;\n  assign _002_[0] = rx_busy_q ? _147_ : bit_div_i[1];\n  assign _148_ = bit_div_i[1] & ~(_035_);\n  assign _149_ = ~(rx_count_q[1] ^ rx_count_q[0]);\n  assign _150_ = _025_ ? _148_ : _149_;\n  assign _002_[1] = rx_busy_q ? _150_ : bit_div_i[2];\n  assign _151_ = bit_div_i[2] & ~(_035_);\n  assign _152_ = _018_ ^ rx_count_q[2];\n  assign _153_ = _025_ ? _151_ : _152_;\n  assign _002_[2] = rx_busy_q ? _153_ : bit_div_i[3];\n  assign _154_ = bit_div_i[3] & ~(_035_);\n  assign _155_ = _018_ & ~(rx_count_q[2]);\n  assign _156_ = _155_ ^ rx_count_q[3];\n  assign _157_ = _025_ ? _154_ : _156_;\n  assign _002_[3] = rx_busy_q ? _157_ : bit_div_i[4];\n  assign _158_ = bit_div_i[4] & ~(_035_);\n  assign _159_ = _019_ & ~(_018_);\n  assign _160_ = _019_ & ~(_159_);\n  assign _161_ = _160_ ^ rx_count_q[4];\n  assign _162_ = _025_ ? _158_ : _161_;\n  assign _002_[4] = rx_busy_q ? _162_ : bit_div_i[5];\n  assign _163_ = bit_div_i[5] & ~(_035_);\n  assign _164_ = _160_ & ~(rx_count_q[4]);\n  assign _165_ = _164_ ^ rx_count_q[5];\n  assign _166_ = _025_ ? _163_ : _165_;\n  assign _002_[5] = rx_busy_q ? _166_ : bit_div_i[6];\n  assign _167_ = bit_div_i[6] & ~(_035_);\n  assign _168_ = ~rx_count_q[6];\n  assign _169_ = _021_ & ~(_160_);\n  assign _170_ = _169_ | ~(_021_);\n  assign _171_ = _170_ ^ _168_;\n  assign _172_ = _025_ ? _167_ : _171_;\n  assign _002_[6] = rx_busy_q ? _172_ : bit_div_i[7];\n  assign _173_ = bit_div_i[7] & ~(_035_);\n  assign _174_ = _168_ & ~(_170_);\n  assign _175_ = _174_ ^ rx_count_q[7];\n  assign _176_ = _025_ ? _173_ : _175_;\n  assign _002_[7] = rx_busy_q ? _176_ : bit_div_i[8];\n  assign _177_ = _035_ | _047_;\n  assign _178_ = _022_ & ~(_021_);\n  assign _179_ = _022_ & ~(_178_);\n  assign _180_ = _023_ & ~(_160_);\n  assign _181_ = _179_ & ~(_180_);\n  assign _182_ = _181_ ^ _017_;\n  assign _183_ = _025_ ? _177_ : _182_;\n  assign _002_[8] = rx_busy_q & ~(_183_);\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[0] <= 1'h0;\n    else if (_009_) rx_count_q[0] <= _002_[0];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[1] <= 1'h0;\n    else if (_009_) rx_count_q[1] <= _002_[1];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[2] <= 1'h0;\n    else if (_009_) rx_count_q[2] <= _002_[2];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[3] <= 1'h0;\n    else if (_009_) rx_count_q[3] <= _002_[3];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[4] <= 1'h0;\n    else if (_009_) rx_count_q[4] <= _002_[4];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[5] <= 1'h0;\n    else if (_009_) rx_count_q[5] <= _002_[5];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[6] <= 1'h0;\n    else if (_009_) rx_count_q[6] <= _002_[6];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[7] <= 1'h0;\n    else if (_009_) rx_count_q[7] <= _002_[7];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:119.1-141.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_count_q[8] <= 1'h0;\n    else if (_009_) rx_count_q[8] <= _002_[8];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:330.1-334.20\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) txd_q <= 1'h1;\n    else txd_q <= txd_r;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_busy_q <= 1'h0;\n    else tx_busy_q <= _006_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:296.1-305.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_bits_q[0] <= 1'h0;\n    else if (_016_) tx_bits_q[0] <= _192_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:296.1-305.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_bits_q[1] <= 1'h0;\n    else if (_016_) tx_bits_q[1] <= _193_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:296.1-305.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_bits_q[2] <= 1'h0;\n    else if (_016_) tx_bits_q[2] <= _194_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:296.1-305.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_bits_q[3] <= 1'h0;\n    else if (_016_) tx_bits_q[3] <= _195_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[0] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[0] <= _008_[0];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[1] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[1] <= _008_[1];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[2] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[2] <= _008_[2];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[3] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[3] <= _008_[3];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[4] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[4] <= _008_[4];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[5] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[5] <= _008_[5];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[6] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[6] <= _008_[6];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:268.1-294.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_shift_reg_q[7] <= 1'h0;\n    else if (_015_) tx_shift_reg_q[7] <= _008_[7];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[0] <= 1'h0;\n    else if (_011_) tx_count_q[0] <= _007_[0];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[1] <= 1'h0;\n    else if (_011_) tx_count_q[1] <= _007_[1];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[2] <= 1'h0;\n    else if (_011_) tx_count_q[2] <= _007_[2];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[3] <= 1'h0;\n    else if (_011_) tx_count_q[3] <= _007_[3];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[4] <= 1'h0;\n    else if (_011_) tx_count_q[4] <= _007_[4];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[5] <= 1'h0;\n    else if (_011_) tx_count_q[5] <= _007_[5];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[6] <= 1'h0;\n    else if (_011_) tx_count_q[6] <= _007_[6];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[7] <= 1'h0;\n    else if (_011_) tx_count_q[7] <= _007_[7];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:247.1-262.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) tx_count_q[8] <= 1'h0;\n    else if (_011_) tx_count_q[8] <= _007_[8];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_ready_q <= 1'h0;\n    else rx_ready_q <= _004_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_err_q <= 1'h0;\n    else rx_err_q <= _003_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[0] <= 1'h0;\n    else if (_014_) rx_data_q[0] <= _184_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[1] <= 1'h0;\n    else if (_014_) rx_data_q[1] <= _185_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[2] <= 1'h0;\n    else if (_014_) rx_data_q[2] <= _186_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[3] <= 1'h0;\n    else if (_014_) rx_data_q[3] <= _187_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[4] <= 1'h0;\n    else if (_014_) rx_data_q[4] <= _188_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[5] <= 1'h0;\n    else if (_014_) rx_data_q[5] <= _189_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[6] <= 1'h0;\n    else if (_014_) rx_data_q[6] <= _190_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:198.1-240.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_data_q[7] <= 1'h0;\n    else if (_014_) rx_data_q[7] <= _191_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:180.1-193.29\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_bits_q[0] <= 1'h0;\n    else if (_010_) rx_bits_q[0] <= _000_[0];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:180.1-193.29\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_bits_q[1] <= 1'h0;\n    else if (_010_) rx_bits_q[1] <= _000_[1];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:180.1-193.29\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_bits_q[2] <= 1'h0;\n    else if (_010_) rx_bits_q[2] <= _000_[2];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:180.1-193.29\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_bits_q[3] <= 1'h0;\n    else if (_010_) rx_bits_q[3] <= _000_[3];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[0] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[0] <= _005_[0];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[1] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[1] <= _005_[1];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[2] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[2] <= _005_[2];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[3] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[3] <= _005_[3];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[4] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[4] <= _005_[4];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[5] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[5] <= _005_[5];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[6] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[6] <= _005_[6];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_shift_reg_q[7] <= 1'h0;\n    else if (_013_) rx_shift_reg_q[7] <= _005_[7];\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:146.1-178.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rx_busy_q <= 1'h0;\n    else if (_012_) rx_busy_q <= _001_;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:102.1-112.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rxd_q <= 1'h1;\n    else rxd_q <= rxd_ms_q;\n  (* src = \"/Users/arades/code/cores/uart/rtl/uart.v:102.1-112.4\" *)\n  always @(posedge clk_i, posedge rst_i)\n    if (rst_i) rxd_ms_q <= 1'h1;\n    else rxd_ms_q <= rxd_i;\n  assign data_o = rx_data_q;\n  assign rx_err_o = rx_err_q;\n  assign rx_ready_o = rx_ready_q;\n  assign tx_busy_o = tx_busy_q;\n  assign txd_o = txd_q;\nendmodule\n", "answer": "//-----------------------------------------------------------------\n//                          Wishbone UART\n//                              V0.1\n//                        Ultra-Embedded.com\n//                          Copyright 2015\n//\n//                 Email: admin@ultra-embedded.com\n//\n//                         License: GPL\n// If you would like a version with a more permissive license for\n// use in closed source commercial applications please contact me\n// for details.\n//-----------------------------------------------------------------\n//\n// This file is open source HDL; you can redistribute it and/or \n// modify it under the terms of the GNU General Public License as \n// published by the Free Software Foundation; either version 2 of \n// the License, or (at your option) any later version.\n//\n// This file is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public \n// License along with this file; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307\n// USA\n//-----------------------------------------------------------------\n\n//-----------------------------------------------------------------\n// Module:\n//-----------------------------------------------------------------\nmodule uart\n\n//-----------------------------------------------------------------\n// Params\n//-----------------------------------------------------------------\n#(\n    parameter UART_DIVISOR_W   = 9\n)\n\n//-----------------------------------------------------------------\n// Ports\n//-----------------------------------------------------------------\n(\n    // Clock & Reset\n    input         clk_i,\n    input         rst_i,\n\n    // Control\n    input [UART_DIVISOR_W-1:0] bit_div_i,\n    input         stop_bits_i, // 0 = 1, 1 = 2\n\n    // Transmit\n    input         wr_i,\n    input  [7:0]  data_i,\n    output        tx_busy_o,\n\n    // Receive\n    input         rd_i,\n    output [7:0]  data_o,\n    output        rx_ready_o,\n\n    output        rx_err_o,\n\n    // UART pins\n    input         rxd_i,\n    output        txd_o\n);\n\n//-----------------------------------------------------------------\n// Registers\n//-----------------------------------------------------------------\nlocalparam   START_BIT = 4'd0;\nlocalparam   STOP_BIT0 = 4'd9;\nlocalparam   STOP_BIT1 = 4'd10;\n\n// TX Signals\nreg                       tx_busy_q;\nreg [3:0]                 tx_bits_q;\nreg [UART_DIVISOR_W-1:0]  tx_count_q;\nreg [7:0]                 tx_shift_reg_q;\nreg                       txd_q;\n\n// RX Signals\nreg                       rxd_q;\nreg [7:0]                 rx_data_q;\nreg [3:0]                 rx_bits_q;\nreg [UART_DIVISOR_W-1:0]  rx_count_q;\nreg [7:0]                 rx_shift_reg_q;\nreg                       rx_ready_q;\nreg                       rx_busy_q;\n\nreg                       rx_err_q;\n\n//-----------------------------------------------------------------\n// Re-sync RXD\n//-----------------------------------------------------------------\nreg rxd_ms_q;\n\nalways @ (posedge rst_i or posedge clk_i )\nif (rst_i)\nbegin\n   rxd_ms_q <= 1'b1;\n   rxd_q    <= 1'b1;\nend\nelse\nbegin\n   rxd_ms_q <= rxd_i;\n   rxd_q    <= rxd_ms_q;\nend\n\n//-----------------------------------------------------------------\n// RX Clock Divider\n//-----------------------------------------------------------------\nwire rx_sample_w = (rx_count_q == {(UART_DIVISOR_W){1'b0}});\n\nalways @ (posedge clk_i or posedge rst_i )\nif (rst_i)\nbegin\n    rx_count_q     <= {(UART_DIVISOR_W){1'b0}};\nend\nelse\nbegin\n    // Inactive\n    if (!rx_busy_q)\n        rx_count_q    <= {1'b0, bit_div_i[UART_DIVISOR_W-1:1]};\n    // Rx bit timer\n    else if (rx_count_q != 0)\n        rx_count_q    <= (rx_count_q - 1);\n    // Active\n    else if (rx_sample_w)\n    begin\n        // Last bit?\n        if ((rx_bits_q == STOP_BIT0 && !stop_bits_i) || (rx_bits_q == STOP_BIT1 && stop_bits_i))\n            rx_count_q    <= {(UART_DIVISOR_W){1'b0}};\n        else\n            rx_count_q    <= bit_div_i;\n    end\nend\n\n//-----------------------------------------------------------------\n// RX Shift Register\n//-----------------------------------------------------------------\nalways @ (posedge clk_i or posedge rst_i )\nbegin\n    if (rst_i)\n    begin        \n        rx_shift_reg_q <= 8'h00;\n        rx_busy_q      <= 1'b0;\n    end\n    // Rx busy\n    else if (rx_busy_q && rx_sample_w)\n    begin\n        // Last bit?\n        if (rx_bits_q == STOP_BIT0 && !stop_bits_i)\n            rx_busy_q <= 1'b0;\n        else if (rx_bits_q == STOP_BIT1 && stop_bits_i)\n            rx_busy_q <= 1'b0;\n        else if (rx_bits_q == START_BIT)\n        begin\n            // Start bit should still be low as sampling mid\n            // way through start bit, so if high, error!\n            if (rxd_q)\n                rx_busy_q <= 1'b0;\n        end\n        // Rx shift register\n        else \n            rx_shift_reg_q <= {rxd_q, rx_shift_reg_q[7:1]};\n    end\n    // Start bit?\n    else if (!rx_busy_q && rxd_q == 1'b0)\n    begin\n        rx_shift_reg_q <= 8'h00;\n        rx_busy_q      <= 1'b1;\n    end\nend\n\nalways @ (posedge clk_i or posedge rst_i )\nif (rst_i)\n    rx_bits_q  <= START_BIT;\nelse if (rx_sample_w && rx_busy_q)\nbegin\n    if ((rx_bits_q == STOP_BIT1 && stop_bits_i) || (rx_bits_q == STOP_BIT0 && !stop_bits_i))\n        rx_bits_q <= START_BIT;\n    else\n        rx_bits_q <= rx_bits_q + 4'd1;\nend\nelse if (!rx_busy_q && (bit_div_i == {(UART_DIVISOR_W){1'b0}}))\n    rx_bits_q  <= START_BIT + 4'd1;\nelse if (!rx_busy_q)\n    rx_bits_q  <= START_BIT;\n\n//-----------------------------------------------------------------\n// RX Data\n//-----------------------------------------------------------------\nalways @ (posedge clk_i or posedge rst_i )\nbegin\n   if (rst_i)\n   begin\n       rx_ready_q      <= 1'b0;\n       rx_data_q       <= 8'h00;\n       rx_err_q        <= 1'b0;\n   end\n   else\n   begin\n       // If reading data, reset data state\n       if (rd_i == 1'b1)\n       begin\n           rx_ready_q <= 1'b0;\n           rx_err_q   <= 1'b0;\n       end\n\n       if (rx_busy_q && rx_sample_w)\n       begin\n           // Stop bit\n           if ((rx_bits_q == STOP_BIT1 && stop_bits_i) || (rx_bits_q == STOP_BIT0 && !stop_bits_i))\n           begin\n               // RXD should be still high\n               if (rxd_q)\n               begin\n                   rx_data_q      <= rx_shift_reg_q;\n                   rx_ready_q     <= 1'b1;\n               end\n               // Bad Stop bit - wait for a full bit period\n               // before allowing start bit detection again\n               else\n               begin\n                   rx_ready_q      <= 1'b0;\n                   rx_data_q       <= 8'h00;\n                   rx_err_q        <= 1'b1;\n               end\n           end\n           // Mid start bit sample - if high then error\n           else if (rx_bits_q == START_BIT && rxd_q)\n               rx_err_q        <= 1'b1;\n       end\n   end\nend\n\n//-----------------------------------------------------------------\n// TX Clock Divider\n//-----------------------------------------------------------------\nwire tx_sample_w = (tx_count_q == {(UART_DIVISOR_W){1'b0}});\n\nalways @ (posedge clk_i or posedge rst_i )\nif (rst_i)\nbegin\n    tx_count_q     <= {(UART_DIVISOR_W){1'b0}};\nend\nelse\nbegin\n    // Idle\n    if (!tx_busy_q)\n        tx_count_q  <= bit_div_i;\n    // Tx bit timer\n    else if (tx_count_q != 0)\n        tx_count_q  <= (tx_count_q - 1);\n    else if (tx_sample_w)\n        tx_count_q  <= bit_div_i;\nend\n\n//-----------------------------------------------------------------\n// TX Shift Register\n//-----------------------------------------------------------------\n\nalways @ (posedge clk_i or posedge rst_i )\nbegin\n    if (rst_i)\n    begin        \n        tx_shift_reg_q <= 8'h00;\n        tx_busy_q      <= 1'b0;\n    end\n    // Tx busy\n    else if (tx_busy_q)\n    begin\n        // Shift tx data\n        if (tx_bits_q != START_BIT && tx_sample_w)\n            tx_shift_reg_q <= {1'b0, tx_shift_reg_q[7:1]};\n\n        // Last bit?\n        if (tx_bits_q == STOP_BIT0 && tx_sample_w && !stop_bits_i)\n            tx_busy_q <= 1'b0;\n        else if (tx_bits_q == STOP_BIT1 && tx_sample_w && stop_bits_i)\n            tx_busy_q <= 1'b0;\n    end\n    // Buffer data to transmit\n    else if (wr_i)\n    begin\n        tx_shift_reg_q <= data_i;\n        tx_busy_q      <= 1'b1;\n    end\nend\n\nalways @ (posedge clk_i or posedge rst_i )\nif (rst_i)\n    tx_bits_q  <= 4'd0;\nelse if (tx_sample_w && tx_busy_q)\nbegin\n    if ((tx_bits_q == STOP_BIT1 && stop_bits_i) || (tx_bits_q == STOP_BIT0 && !stop_bits_i))\n        tx_bits_q <= START_BIT;\n    else\n        tx_bits_q <= tx_bits_q + 4'd1;\nend\n\n//-----------------------------------------------------------------\n// UART Tx Pin\n//-----------------------------------------------------------------\nreg txd_r;\n\nalways @ *\nbegin\n    txd_r = 1'b1;\n\n    if (tx_busy_q)\n    begin\n        // Start bit (TXD = L)\n        if (tx_bits_q == START_BIT)\n            txd_r = 1'b0;\n        // Stop bits (TXD = H)\n        else if (tx_bits_q == STOP_BIT0 || tx_bits_q == STOP_BIT1)\n            txd_r = 1'b1;\n        // Data bits\n        else\n            txd_r = tx_shift_reg_q[0];\n    end\nend\n\nalways @ (posedge clk_i or posedge rst_i )\nif (rst_i)\n    txd_q <= 1'b1;\nelse\n    txd_q <= txd_r;\n\n//-----------------------------------------------------------------\n// Outputs\n//-----------------------------------------------------------------\nassign tx_busy_o  = tx_busy_q;\nassign rx_ready_o = rx_ready_q;\nassign txd_o      = txd_q;\nassign data_o     = rx_data_q;\nassign rx_err_o   = rx_err_q;\n\nendmodule\n"}