{"question": "/* Generated by Yosys 0.53 (git sha1 53c22ab7c, clang++ 15.0.0 -fPIC -O3) */\n\n(* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:9.1-140.10\" *)\nmodule transmitter(i_Clock, i_Tx_DV, i_Tx_Byte, o_Tx_Active, o_Tx_Serial, o_Tx_Done);\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  wire _000_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  wire _001_;\n  wire _002_;\n  wire _003_;\n  wire _004_;\n  wire _005_;\n  wire _006_;\n  wire _007_;\n  wire _008_;\n  wire _009_;\n  wire _010_;\n  wire _011_;\n  wire _012_;\n  wire _013_;\n  wire _014_;\n  wire _015_;\n  wire _016_;\n  wire _017_;\n  wire _018_;\n  wire _019_;\n  wire _020_;\n  wire _021_;\n  wire _022_;\n  wire _023_;\n  wire _024_;\n  wire _025_;\n  wire _026_;\n  wire _027_;\n  wire _028_;\n  wire _029_;\n  wire _030_;\n  wire _031_;\n  wire _032_;\n  wire _033_;\n  wire _034_;\n  wire _035_;\n  wire _036_;\n  wire _037_;\n  wire _038_;\n  wire _039_;\n  wire _040_;\n  wire _041_;\n  wire _042_;\n  wire _043_;\n  wire _044_;\n  wire _045_;\n  wire _046_;\n  wire _047_;\n  wire _048_;\n  wire _049_;\n  wire _050_;\n  wire _051_;\n  wire _052_;\n  wire _053_;\n  wire _054_;\n  wire _055_;\n  wire _056_;\n  wire _057_;\n  wire _058_;\n  wire _059_;\n  wire _060_;\n  wire _061_;\n  wire _062_;\n  wire _063_;\n  wire _064_;\n  wire _065_;\n  wire _066_;\n  wire _067_;\n  wire _068_;\n  wire _069_;\n  wire _070_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:88.21-88.36|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:270.26-270.27\" *)\n  wire [2:0] _071_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:108.17-108.47|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:270.26-270.27\" *)\n  (* unused_bits = \"1 2 3 4 5 6 7\" *)\n  wire [7:0] _072_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:110.34-110.51|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:270.26-270.27\" *)\n  wire [7:0] _073_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:0.0-0.0|/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:35.7-134.14|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:584.28-584.35\" *)\n  (* unused_bits = \"0 1 2 3 4 6 7\" *)\n  wire [11:0] _074_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:0.0-0.0|/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:35.7-134.14|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:576.21-576.22\" *)\n  wire [2:0] _075_;\n  (* force_downto = 32'd1 *)\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:0.0-0.0|/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:35.7-134.14|/Users/arades/code/verai/.venv/lib/python3.13/site-packages/pyosys/share/techmap.v:576.21-576.22\" *)\n  wire _076_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:10.16-10.23\" *)\n  input i_Clock;\n  wire i_Clock;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:12.16-12.25\" *)\n  input [7:0] i_Tx_Byte;\n  wire [7:0] i_Tx_Byte;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:11.16-11.23\" *)\n  input i_Tx_DV;\n  wire i_Tx_DV;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:13.16-13.27\" *)\n  output o_Tx_Active;\n  wire o_Tx_Active;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:15.16-15.25\" *)\n  output o_Tx_Done;\n  wire o_Tx_Done;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:14.19-14.30\" *)\n  output o_Tx_Serial;\n  reg o_Tx_Serial;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:27.16-27.27\" *)\n  reg [2:0] r_Bit_Index = 3'h0;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:26.16-26.29\" *)\n  reg [7:0] r_Clock_Count = 8'h00;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:25.16-25.25\" *)\n  reg [2:0] r_SM_Main = 3'h0;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:30.16-30.27\" *)\n  reg r_Tx_Active = 1'h0;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:28.16-28.25\" *)\n  reg [7:0] r_Tx_Data = 8'h00;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:29.16-29.25\" *)\n  reg r_Tx_Done = 1'h0;\n  assign _072_[0] = ~r_Clock_Count[0];\n  assign _032_ = ~(r_SM_Main[0] & r_SM_Main[1]);\n  assign _000_ = _032_ | r_SM_Main[2];\n  assign _033_ = ~r_SM_Main[2];\n  assign _034_ = r_SM_Main[0] | ~(r_SM_Main[1]);\n  assign _035_ = _033_ & ~(_034_);\n  assign _036_ = _000_ & ~(_035_);\n  assign _037_ = r_SM_Main[1] | ~(r_SM_Main[0]);\n  assign _038_ = _033_ & ~(_037_);\n  assign _039_ = _036_ & ~(_038_);\n  assign _040_ = r_Clock_Count[7] | r_Clock_Count[6];\n  assign _041_ = ~(r_Clock_Count[7] | r_Clock_Count[6]);\n  assign _042_ = ~(r_Clock_Count[5] | r_Clock_Count[4]);\n  assign _043_ = _041_ & ~(_042_);\n  assign _044_ = _043_ | _040_;\n  assign _045_ = r_Clock_Count[5] | r_Clock_Count[4];\n  assign _046_ = _041_ & ~(_045_);\n  assign _047_ = ~(r_Clock_Count[3] | r_Clock_Count[2]);\n  assign _048_ = ~(r_Clock_Count[0] | r_Clock_Count[1]);\n  assign _049_ = _047_ & ~(_048_);\n  assign _050_ = _047_ & ~(_049_);\n  assign _051_ = _046_ & ~(_050_);\n  assign _052_ = _051_ | _044_;\n  assign _007_ = _052_ | _039_;\n  assign _053_ = ~(r_Bit_Index[1] & r_Bit_Index[0]);\n  assign _054_ = r_Bit_Index[2] & ~(_053_);\n  assign _008_ = _054_ | ~(_035_);\n  assign _055_ = r_SM_Main[0] | r_SM_Main[1];\n  assign _056_ = _055_ | r_SM_Main[2];\n  assign _057_ = _056_ | i_Tx_DV;\n  assign _058_ = ~(_052_ | _000_);\n  assign _059_ = _057_ & ~(_058_);\n  assign _060_ = _056_ & _000_;\n  assign _004_ = _059_ & ~(_060_);\n  assign _061_ = _035_ | ~(_060_);\n  assign _003_ = _061_ | _038_;\n  assign _002_ = ~(_056_ & _039_);\n  assign _062_ = _055_ | _033_;\n  assign _001_ = ~(_062_ & _000_);\n  assign _063_ = ~_056_;\n  assign _006_ = _035_ ? _052_ : _063_;\n  assign _064_ = ~(_001_ | _063_);\n  assign _005_ = ~(_064_ | _058_);\n  assign _074_[9] = i_Tx_DV & ~(_056_);\n  assign _065_ = ~(_054_ & _052_);\n  assign _066_ = _035_ & ~(_065_);\n  assign _067_ = _066_ | _058_;\n  assign _068_ = _038_ & ~(_052_);\n  assign _069_ = _068_ | _074_[9];\n  assign _070_ = _069_ | _067_;\n  assign _009_ = _056_ & ~(_038_);\n  assign _010_ = ~(_009_ & _036_);\n  assign _075_[0] = _010_ & _070_;\n  assign _011_ = ~(_058_ | _035_);\n  assign _012_ = _052_ & _038_;\n  assign _013_ = _011_ & ~(_012_);\n  assign _075_[1] = _010_ & ~(_013_);\n  assign _014_ = _000_ | ~(_052_);\n  assign _075_[2] = _010_ & ~(_014_);\n  assign _015_ = r_Bit_Index[0] ? r_Tx_Data[1] : r_Tx_Data[0];\n  assign _016_ = r_Bit_Index[0] ? r_Tx_Data[3] : r_Tx_Data[2];\n  assign _017_ = r_Bit_Index[1] ? _016_ : _015_;\n  assign _018_ = r_Bit_Index[0] ? r_Tx_Data[5] : r_Tx_Data[4];\n  assign _019_ = r_Bit_Index[0] ? r_Tx_Data[7] : r_Tx_Data[6];\n  assign _020_ = r_Bit_Index[1] ? _019_ : _018_;\n  assign _021_ = r_Bit_Index[2] ? _020_ : _017_;\n  assign _022_ = _021_ & _035_;\n  assign _023_ = _060_ & ~(_022_);\n  assign _076_ = _061_ & ~(_023_);\n  assign _071_[0] = ~r_Bit_Index[0];\n  assign _071_[1] = r_Bit_Index[1] ^ r_Bit_Index[0];\n  assign _071_[2] = ~(_053_ ^ r_Bit_Index[2]);\n  assign _073_[1] = r_Clock_Count[0] ^ r_Clock_Count[1];\n  assign _024_ = r_Clock_Count[0] & r_Clock_Count[1];\n  assign _073_[2] = _024_ ^ r_Clock_Count[2];\n  assign _025_ = _024_ & r_Clock_Count[2];\n  assign _073_[3] = _025_ ^ r_Clock_Count[3];\n  assign _026_ = ~(r_Clock_Count[3] & r_Clock_Count[2]);\n  assign _027_ = _024_ & ~(_026_);\n  assign _073_[4] = _027_ ^ r_Clock_Count[4];\n  assign _028_ = _027_ & r_Clock_Count[4];\n  assign _073_[5] = _028_ ^ r_Clock_Count[5];\n  assign _029_ = ~(r_Clock_Count[5] & r_Clock_Count[4]);\n  assign _030_ = _027_ & ~(_029_);\n  assign _073_[6] = _030_ ^ r_Clock_Count[6];\n  assign _031_ = _030_ & r_Clock_Count[6];\n  assign _073_[7] = _031_ ^ r_Clock_Count[7];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_006_)\n      if (_008_) r_Bit_Index[0] <= 1'h0;\n      else r_Bit_Index[0] <= _071_[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_006_)\n      if (_008_) r_Bit_Index[1] <= 1'h0;\n      else r_Bit_Index[1] <= _071_[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_006_)\n      if (_008_) r_Bit_Index[2] <= 1'h0;\n      else r_Bit_Index[2] <= _071_[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_004_) r_Tx_Active <= _000_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[0] <= 1'h0;\n      else r_Clock_Count[0] <= _072_[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[1] <= 1'h0;\n      else r_Clock_Count[1] <= _073_[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[2] <= 1'h0;\n      else r_Clock_Count[2] <= _073_[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[3] <= 1'h0;\n      else r_Clock_Count[3] <= _073_[3];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[4] <= 1'h0;\n      else r_Clock_Count[4] <= _073_[4];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[5] <= 1'h0;\n      else r_Clock_Count[5] <= _073_[5];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[6] <= 1'h0;\n      else r_Clock_Count[6] <= _073_[6];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_002_)\n      if (_007_) r_Clock_Count[7] <= 1'h0;\n      else r_Clock_Count[7] <= _073_[7];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    r_SM_Main[0] <= _075_[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    r_SM_Main[1] <= _075_[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    r_SM_Main[2] <= _075_[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_003_) o_Tx_Serial <= _076_;\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[0] <= i_Tx_Byte[0];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[1] <= i_Tx_Byte[1];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[2] <= i_Tx_Byte[2];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[3] <= i_Tx_Byte[3];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[4] <= i_Tx_Byte[4];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[5] <= i_Tx_Byte[5];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[6] <= i_Tx_Byte[6];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_074_[9]) r_Tx_Data[7] <= i_Tx_Byte[7];\n  (* src = \"/Users/arades/Downloads/UART-main/cp024s-uart/transmitter.v:32.3-135.8\" *)\n  always @(posedge i_Clock)\n    if (_005_) r_Tx_Done <= _001_;\n  assign _073_[0] = _072_[0];\n  assign { _074_[11:10], _074_[8], _074_[5], _074_[0] } = { 4'h0, _074_[1] };\n  assign o_Tx_Active = r_Tx_Active;\n  assign o_Tx_Done = r_Tx_Done;\nendmodule\n", "answer": "`timescale 1ns / 1ps\n\n//////////////////////////////////////////////////////////////////////////////////\n// Set Parameter CLKS_PER_BIT as follows:\n// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)\n// Example: 10 MHz Clock, 115200 baud UART\n// (10000000)/(115200) = 87\n\nmodule transmitter (\n   input       i_Clock,\n   input       i_Tx_DV,\n   input [7:0] i_Tx_Byte, \n   output      o_Tx_Active,\n   output    reg  o_Tx_Serial,\n   output      o_Tx_Done\n   );\n  \n  parameter CLKS_PER_BIT   = 2;\n  parameter s_IDLE         = 3'b000;\n  parameter s_TX_START_BIT = 3'b001;\n  parameter s_TX_DATA_BITS = 3'b010;\n  parameter s_TX_STOP_BIT  = 3'b011;\n  parameter s_CLEANUP      = 3'b100;\n  \n  reg [2:0]    r_SM_Main     = 0;\n  reg [7:0]    r_Clock_Count = 0;\n  reg [2:0]    r_Bit_Index   = 0;\n  reg [7:0]    r_Tx_Data     = 0;\n  reg          r_Tx_Done     = 0;\n  reg          r_Tx_Active   = 0;\n     \n  always @(posedge i_Clock)\n    begin\n       \n      case (r_SM_Main)\n        s_IDLE :\n          begin\n            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle\n            r_Tx_Done     <= 1'b0;\n            r_Clock_Count <= 0;\n            r_Bit_Index   <= 0;\n             \n            if (i_Tx_DV == 1'b1)\n              begin\n                r_Tx_Active <= 1'b1;\n                r_Tx_Data   <= i_Tx_Byte;\n                r_SM_Main   <= s_TX_START_BIT;\n              end\n            else\n              r_SM_Main <= s_IDLE;\n          end // case: s_IDLE\n         \n         \n        // Send out Start Bit. Start bit = 0\n        s_TX_START_BIT :\n          begin\n            o_Tx_Serial <= 1'b0;\n             \n            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish\n            if (r_Clock_Count < CLKS_PER_BIT-1)\n              begin\n                r_Clock_Count <= r_Clock_Count + 1;\n                r_SM_Main     <= s_TX_START_BIT;\n              end\n            else\n              begin\n                r_Clock_Count <= 0;\n                r_SM_Main     <= s_TX_DATA_BITS;\n              end\n          end // case: s_TX_START_BIT\n         \n         \n        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         \n        s_TX_DATA_BITS :\n          begin\n            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];\n             \n            if (r_Clock_Count < CLKS_PER_BIT-1)\n              begin\n                r_Clock_Count <= r_Clock_Count + 1;\n                r_SM_Main     <= s_TX_DATA_BITS;\n              end\n            else\n              begin\n                r_Clock_Count <= 0;\n                 \n                // Check if we have sent out all bits\n                if (r_Bit_Index < 7)\n                  begin\n                    r_Bit_Index <= r_Bit_Index + 1;\n                    r_SM_Main   <= s_TX_DATA_BITS;\n                  end\n                else\n                  begin\n                    r_Bit_Index <= 0;\n                    r_SM_Main   <= s_TX_STOP_BIT;\n                  end\n              end\n          end // case: s_TX_DATA_BITS\n         \n         \n        // Send out Stop bit.  Stop bit = 1\n        s_TX_STOP_BIT :\n          begin\n            o_Tx_Serial <= 1'b1;\n             \n            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish\n            if (r_Clock_Count < CLKS_PER_BIT-1)\n              begin\n                r_Clock_Count <= r_Clock_Count + 1;\n                r_SM_Main     <= s_TX_STOP_BIT;\n              end\n            else\n              begin\n                r_Tx_Done     <= 1'b1;\n                r_Clock_Count <= 0;\n                r_SM_Main     <= s_CLEANUP;\n                r_Tx_Active   <= 1'b0;\n              end\n          end // case: s_Tx_STOP_BIT\n         \n         \n        // Stay here 1 clock\n        s_CLEANUP :\n          begin\n            r_Tx_Done <= 1'b1;\n            r_SM_Main <= s_IDLE;\n          end\n         \n         \n        default :\n          r_SM_Main <= s_IDLE;\n         \n      endcase\n    end\n \n  assign o_Tx_Active = r_Tx_Active;\n  assign o_Tx_Done   = r_Tx_Done;\n   \nendmodule\n"}